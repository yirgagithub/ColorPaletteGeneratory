/// <reference types="chrome" />
import { PluginContext } from 'rollup';
import { JsonObject, Promisable } from 'type-fest';
import { Plugin as VitePlugin } from 'vite';
import { Unpacked } from './helpers';
declare type Nullable<TType> = TType | null | undefined;
export declare type Writeable<T> = {
    -readonly [P in keyof T]: T[P];
};
export declare type Manifest = chrome.runtime.Manifest;
export declare type ManifestV2 = Omit<chrome.runtime.ManifestV2, 'name' | 'description' | 'version'> & Partial<Pick<chrome.runtime.ManifestV2, 'name' | 'description' | 'version'>>;
export declare type ManifestV3 = Omit<chrome.runtime.ManifestV3, 'name' | 'description' | 'version'> & Partial<Pick<chrome.runtime.ManifestV3, 'name' | 'description' | 'version'>>;
export declare type ContentScript = Unpacked<chrome.runtime.Manifest['content_scripts']>;
export declare type WebAccessibleResource = Unpacked<chrome.runtime.ManifestV3['web_accessible_resources']>;
export declare type DeclarativeNetRequestResource = {
    id: string;
    enabled: boolean;
    path: string;
};
export declare function isMV2(m?: chrome.runtime.ManifestBase): m is chrome.runtime.ManifestV2;
export declare function isMV3(m?: chrome.runtime.ManifestBase): m is chrome.runtime.ManifestV3;
export declare type AssetType = 'CSS' | 'HTML' | 'IMAGE' | 'JSON' | 'MANIFEST' | 'RAW';
export declare type ScriptType = 'BACKGROUND' | 'CONTENT' | 'MODULE';
export declare type FileType = AssetType | ScriptType;
export declare type ParserReturnType = Record<Exclude<FileType, 'MANIFEST' | 'HTML' | 'JSON'>, string[]>;
export interface Script {
    fileType: ScriptType;
    id: string;
    fileName: string;
    fileId?: string;
}
export interface BaseAsset {
    fileType: AssetType;
    id: string;
    fileName: string;
    fileId?: string;
    dirName?: string;
}
export interface StringAsset extends BaseAsset {
    fileType: 'CSS' | 'HTML';
    source: string;
}
export interface RawAsset extends BaseAsset {
    fileType: 'IMAGE' | 'RAW';
    source: Uint8Array;
}
export interface JsonAsset extends BaseAsset {
    fileType: 'JSON';
    source: JsonObject;
}
export interface ManifestAsset extends BaseAsset {
    fileType: 'MANIFEST';
    source: Manifest;
}
export declare type Asset = StringAsset | RawAsset | JsonAsset | ManifestAsset;
export interface CompleteFile {
    fileType: FileType;
    fileName: string;
    id: string;
    type: 'chunk' | 'asset';
    source?: string | Uint8Array;
}
interface CrxHookTypes {
    manifest?: (this: PluginContext, source: Manifest) => Promisable<Nullable<Manifest>>;
    html?: (this: PluginContext, source: string, file: StringAsset) => Promisable<Nullable<StringAsset | string>>;
    css?: (this: PluginContext, source: string, file: StringAsset) => Promisable<Nullable<StringAsset | string>>;
    image?: (this: PluginContext, source: Uint8Array, file: RawAsset) => Promisable<Nullable<RawAsset | Uint8Array>>;
    json?: (this: PluginContext, file: JsonAsset) => Promisable<Nullable<JsonAsset>>;
    raw?: (this: PluginContext, source: Uint8Array, file: RawAsset) => Promisable<Nullable<RawAsset | Uint8Array>>;
}
export declare type CrxHookType = 'transform' | 'render';
declare type CreateCrxHooks<THooks> = {
    [TransformProp in keyof THooks as `${CrxHookType}Crx${Capitalize<string & TransformProp>}`]: THooks[TransformProp];
};
export declare type CrxHooks = CreateCrxHooks<CrxHookTypes>;
export declare type CrxPlugin = VitePlugin & CrxHooks & {
    /** This prop is required to ensure during serve mode that written files use the same plugin */
    crx?: boolean;
};
export interface ChromeExtensionOptions {
    /**
     * @deprecated This is not supported for MV3, use this instead:
     * ```js
     * import browser from 'webextension-polyfill'
     * ```
     */
    browserPolyfill?: boolean | {
        executeScript: boolean;
    };
    /**
     * @deprecated Use a dynamic manifest instead.
     * TODO: add link to docs
     */
    extendManifest?: Partial<Manifest> | (<T extends chrome.runtime.ManifestBase>(manifest: T) => T);
    pkg?: {
        description: string;
        name: string;
        version: string;
    };
}
export {};
