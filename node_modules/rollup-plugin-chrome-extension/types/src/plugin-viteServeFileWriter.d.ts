import { ViteDevServer } from 'vite';
import { CrxPlugin } from './types';
/**
 * Writes extension files during Vite serve.
 *
 * The Vite dev server doesn't write files to the disk,
 * which is a requirement for Chrome Extension development.
 *
 * This plugin uses an instance of Rollup Watch to
 * fulfill this requirement. We'll use a plugin to load
 * files from the dev server, and then write them to disk.
 * This keeps configuration consistent and simple.
 *
 * Since we're still using the Vite server to load files,
 * Vite will call certain hooks (resolveId, load, transform).
 * These hooks should be excluded from Rollup Watch
 * to avoid duplicate hook calls.
 */
export declare function viteServeFileWriter(): CrxPlugin;
/**
 * For use in tests. Resolves when file write operation is complete.
 */
export declare const filesReady: () => Promise<import("xstate").State<import("./plugin-viteServeFileWriter.machine").FileWriterContext, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    PLUGINS: (plugins: CrxPlugin[]) => {
        plugins: CrxPlugin[];
    };
    SERVER: (server: ViteDevServer) => {
        server: ViteDevServer;
    };
    SERVER_READY: () => {};
    BUNDLE_START: (event: {
        code: "BUNDLE_START";
        input?: import("rollup").InputOption | undefined;
        output: readonly string[];
    }) => {
        event: {
            code: "BUNDLE_START";
            input?: import("rollup").InputOption | undefined;
            output: readonly string[];
        };
    };
    BUNDLE_END: (event: {
        code: "BUNDLE_END";
        duration: number;
        input?: import("rollup").InputOption | undefined;
        output: readonly string[];
        result: import("rollup").RollupBuild;
    }) => {
        event: {
            code: "BUNDLE_END";
            duration: number;
            input?: import("rollup").InputOption | undefined;
            output: readonly string[];
            result: import("rollup").RollupBuild;
        };
    };
    ERROR: (error: any, id?: string | undefined) => {
        id: string | undefined;
        error: any;
    };
}>>, any, {
    value: any;
    context: import("./plugin-viteServeFileWriter.machine").FileWriterContext;
}>>;
