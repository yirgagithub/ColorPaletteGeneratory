import { Script } from './types';
export declare const scriptMachine: import("xstate").StateMachine<Script & {
    children?: Map<string, never> | undefined;
}, any, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ABORT: () => {};
    BUILD_MANIFEST: () => {};
    BUILD_START: () => {};
    CHANGE: (id: string, change: {
        event: import("rollup").ChangeEvent;
    }) => {
        event: import("rollup").ChangeEvent;
        id: string;
    };
    COMPLETE_FILE: (data: {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    }) => {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    };
    EMIT_FILE: (file: Omit<import("./types").CompleteFile, "fileId" | "source">) => {
        file: Omit<import("./types").CompleteFile, "fileId" | "source">;
    };
    EMIT_START: (manifest?: boolean) => {
        manifest: boolean;
    };
    ENQUEUE_FILES: (files: (Script | import("./types").BaseAsset)[]) => {
        files: ({
            fileType: import("./types").ScriptType;
            fileId?: string | undefined;
            fileName: string;
            id: string;
        } | {
            fileType: import("./types").AssetType;
            fileId?: string | undefined;
            dirName?: string | undefined;
            fileName: string;
            id: string;
        })[];
    };
    ERROR: (error: unknown) => {
        error: unknown;
    };
    EXCLUDE_FILE_TYPE: (fileType: import("./types").FileType) => {
        fileType: import("./types").FileType;
    };
    FILE_EXCLUDED: (id: string) => {
        id: string;
    };
    FILE_ID: (input: {
        id: string;
        fileId: string;
    }) => {
        id: string;
        fileId: string;
    };
    GENERATE_BUNDLE: () => {};
    PARSE_RESULT: (fileName: string, files: (Script | import("./types").BaseAsset)[]) => {
        fileName: string;
        children: (Script | import("./types").BaseAsset)[];
    };
    PLUGINS_RESULT: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    PLUGINS_START: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    READY: (id: string) => {
        id: string;
    };
    REMOVE_FILE: (id: string) => {
        id: string;
    };
    RENDER_START: (fileName: string) => {
        fileName: string;
    };
    ROOT: (root: string) => {
        root: string;
    };
    SCRIPT_COMPLETE: (id: string) => {
        id: string;
    };
    SPAWN_FILE: (file: Script | import("./types").BaseAsset) => {
        file: Script | import("./types").BaseAsset;
    };
}>>, {
    value: any;
    context: Script & {
        children?: Map<string, never> | undefined;
    };
}, import("xstate").ActionObject<Script & {
    children?: Map<string, never> | undefined;
}, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ABORT: () => {};
    BUILD_MANIFEST: () => {};
    BUILD_START: () => {};
    CHANGE: (id: string, change: {
        event: import("rollup").ChangeEvent;
    }) => {
        event: import("rollup").ChangeEvent;
        id: string;
    };
    COMPLETE_FILE: (data: {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    }) => {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    };
    EMIT_FILE: (file: Omit<import("./types").CompleteFile, "fileId" | "source">) => {
        file: Omit<import("./types").CompleteFile, "fileId" | "source">;
    };
    EMIT_START: (manifest?: boolean) => {
        manifest: boolean;
    };
    ENQUEUE_FILES: (files: (Script | import("./types").BaseAsset)[]) => {
        files: ({
            fileType: import("./types").ScriptType;
            fileId?: string | undefined;
            fileName: string;
            id: string;
        } | {
            fileType: import("./types").AssetType;
            fileId?: string | undefined;
            dirName?: string | undefined;
            fileName: string;
            id: string;
        })[];
    };
    ERROR: (error: unknown) => {
        error: unknown;
    };
    EXCLUDE_FILE_TYPE: (fileType: import("./types").FileType) => {
        fileType: import("./types").FileType;
    };
    FILE_EXCLUDED: (id: string) => {
        id: string;
    };
    FILE_ID: (input: {
        id: string;
        fileId: string;
    }) => {
        id: string;
        fileId: string;
    };
    GENERATE_BUNDLE: () => {};
    PARSE_RESULT: (fileName: string, files: (Script | import("./types").BaseAsset)[]) => {
        fileName: string;
        children: (Script | import("./types").BaseAsset)[];
    };
    PLUGINS_RESULT: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    PLUGINS_START: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    READY: (id: string) => {
        id: string;
    };
    REMOVE_FILE: (id: string) => {
        id: string;
    };
    RENDER_START: (fileName: string) => {
        fileName: string;
    };
    ROOT: (root: string) => {
        root: string;
    };
    SCRIPT_COMPLETE: (id: string) => {
        id: string;
    };
    SPAWN_FILE: (file: Script | import("./types").BaseAsset) => {
        file: Script | import("./types").BaseAsset;
    };
}>>>>;
