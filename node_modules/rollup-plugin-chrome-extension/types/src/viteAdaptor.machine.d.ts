import { EmittedFile, RollupOptions, RollupWatcherEvent } from 'rollup';
import { Plugin as VitePlugin, ViteDevServer } from 'vite';
import { RPCEPlugin } from './types';
export declare const configHook = "config";
export declare const serverHook = "configureServer";
export declare const optionsHook = "buildStart";
interface Context {
    options?: RollupOptions;
    plugins: Set<RPCEPlugin>;
    server?: ViteDevServer;
}
export declare const getEmittedFileId: (file: EmittedFile) => string;
export declare const model: import("xstate/lib/model.types").Model<Context, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ADD_PLUGIN: (plugin: RPCEPlugin) => {
        plugin: RPCEPlugin;
    };
    HOOK_START: (hookName: keyof RPCEPlugin, args: any[]) => {
        hookName: "transformCrxManifest" | "renderCrxManifest" | "transformCrxCss" | "renderCrxCss" | "transformCrxHtml" | "renderCrxHtml" | "transformCrxImage" | "renderCrxImage" | "transformCrxJson" | "renderCrxJson" | "transformCrxRaw" | "renderCrxRaw" | keyof VitePlugin;
        args: any[];
    };
    SERVER_READY: () => {};
    BUNDLE_START: (event: Extract<RollupWatcherEvent, {
        code: 'BUNDLE_START';
    }>) => {
        event: {
            code: "BUNDLE_START";
            input?: import("rollup").InputOption | undefined;
            output: readonly string[];
        };
    };
    BUNDLE_END: (event: Extract<RollupWatcherEvent, {
        code: 'BUNDLE_END';
    }>) => {
        event: {
            code: "BUNDLE_END";
            duration: number;
            input?: import("rollup").InputOption | undefined;
            output: readonly string[];
            result: import("rollup").RollupBuild;
        };
    };
    ERROR: (error: any, id?: string | undefined) => {
        id: string | undefined;
        error: any;
    };
}>>, import("xstate").BaseActionObject, import("xstate/lib/model.types").FinalModelCreators<{
    events: {
        ADD_PLUGIN: (plugin: RPCEPlugin) => {
            plugin: RPCEPlugin;
        };
        HOOK_START: (hookName: keyof RPCEPlugin, args: any[]) => {
            hookName: "transformCrxManifest" | "renderCrxManifest" | "transformCrxCss" | "renderCrxCss" | "transformCrxHtml" | "renderCrxHtml" | "transformCrxImage" | "renderCrxImage" | "transformCrxJson" | "renderCrxJson" | "transformCrxRaw" | "renderCrxRaw" | keyof VitePlugin;
            args: any[];
        };
        SERVER_READY: () => {};
        BUNDLE_START: (event: Extract<RollupWatcherEvent, {
            code: 'BUNDLE_START';
        }>) => {
            event: {
                code: "BUNDLE_START";
                input?: import("rollup").InputOption | undefined;
                output: readonly string[];
            };
        };
        BUNDLE_END: (event: Extract<RollupWatcherEvent, {
            code: 'BUNDLE_END';
        }>) => {
            event: {
                code: "BUNDLE_END";
                duration: number;
                input?: import("rollup").InputOption | undefined;
                output: readonly string[];
                result: import("rollup").RollupBuild;
            };
        };
        ERROR: (error: any, id?: string | undefined) => {
            id: string | undefined;
            error: any;
        };
    };
}>>;
export declare const viteAdaptorMachine: import("xstate").StateMachine<Context, any, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ADD_PLUGIN: (plugin: RPCEPlugin) => {
        plugin: RPCEPlugin;
    };
    HOOK_START: (hookName: keyof RPCEPlugin, args: any[]) => {
        hookName: "transformCrxManifest" | "renderCrxManifest" | "transformCrxCss" | "renderCrxCss" | "transformCrxHtml" | "renderCrxHtml" | "transformCrxImage" | "renderCrxImage" | "transformCrxJson" | "renderCrxJson" | "transformCrxRaw" | "renderCrxRaw" | keyof VitePlugin;
        args: any[];
    };
    SERVER_READY: () => {};
    BUNDLE_START: (event: Extract<RollupWatcherEvent, {
        code: 'BUNDLE_START';
    }>) => {
        event: {
            code: "BUNDLE_START";
            input?: import("rollup").InputOption | undefined;
            output: readonly string[];
        };
    };
    BUNDLE_END: (event: Extract<RollupWatcherEvent, {
        code: 'BUNDLE_END';
    }>) => {
        event: {
            code: "BUNDLE_END";
            duration: number;
            input?: import("rollup").InputOption | undefined;
            output: readonly string[];
            result: import("rollup").RollupBuild;
        };
    };
    ERROR: (error: any, id?: string | undefined) => {
        id: string | undefined;
        error: any;
    };
}>>, {
    value: any;
    context: Context;
}, import("xstate").ActionObject<Context, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ADD_PLUGIN: (plugin: RPCEPlugin) => {
        plugin: RPCEPlugin;
    };
    HOOK_START: (hookName: keyof RPCEPlugin, args: any[]) => {
        hookName: "transformCrxManifest" | "renderCrxManifest" | "transformCrxCss" | "renderCrxCss" | "transformCrxHtml" | "renderCrxHtml" | "transformCrxImage" | "renderCrxImage" | "transformCrxJson" | "renderCrxJson" | "transformCrxRaw" | "renderCrxRaw" | keyof VitePlugin;
        args: any[];
    };
    SERVER_READY: () => {};
    BUNDLE_START: (event: Extract<RollupWatcherEvent, {
        code: 'BUNDLE_START';
    }>) => {
        event: {
            code: "BUNDLE_START";
            input?: import("rollup").InputOption | undefined;
            output: readonly string[];
        };
    };
    BUNDLE_END: (event: Extract<RollupWatcherEvent, {
        code: 'BUNDLE_END';
    }>) => {
        event: {
            code: "BUNDLE_END";
            duration: number;
            input?: import("rollup").InputOption | undefined;
            output: readonly string[];
            result: import("rollup").RollupBuild;
        };
    };
    ERROR: (error: any, id?: string | undefined) => {
        id: string | undefined;
        error: any;
    };
}>>>>;
export {};
