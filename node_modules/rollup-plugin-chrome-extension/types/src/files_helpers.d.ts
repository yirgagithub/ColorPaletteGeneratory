import { EventObject, ExtractEvent, Interpreter, InterpreterOptions, MachineOptions, State, StateConfig, StateMachine, Typestate, ActorRef } from 'xstate';
export declare function narrowEvent<TEvent extends EventObject, TEventType extends TEvent['type']>(event: TEvent, type: TEventType): ExtractEvent<TEvent, TEventType>;
export declare function narrowEvent<TEvent extends EventObject, TEventType extends TEvent['type']>(event: TEvent, type: TEventType[]): ExtractEvent<TEvent, TEventType>;
export interface UseMachineOptions<TContext, TEvent extends EventObject> {
    /**
     * If provided, will be merged with machine's `context`.
     */
    context?: Partial<TContext>;
    /**
     * The state to rehydrate the machine to. The machine will
     * start at this state instead of its `initialState`.
     */
    state?: StateConfig<TContext, TEvent>;
}
export declare const useConfig: <TContext, TEvent extends EventObject>(service: Interpreter<TContext, any, TEvent, any>, options?: Partial<MachineOptions<TContext, TEvent, import("xstate").ActionObject<TContext, TEvent>>>) => void;
export declare function useMachine<TContext, TEvent extends EventObject, TTypestate extends Typestate<TContext> = {
    value: any;
    context: TContext;
}>(machine: StateMachine<TContext, any, TEvent, TTypestate>, options?: Partial<InterpreterOptions> & Partial<UseMachineOptions<TContext, TEvent>> & Partial<MachineOptions<TContext, TEvent>>): {
    send: Interpreter<TContext, any, TEvent, TTypestate>['send'];
    service: Interpreter<TContext, any, TEvent, TTypestate>;
    waitFor: (matcher: (state: State<TContext, TEvent, any, TTypestate>) => boolean) => Promise<State<TContext, TEvent, any, TTypestate>>;
};
export declare function debugHelper<TContext, TEvent extends EventObject>(service: Interpreter<TContext, any, TEvent> | ActorRef<any, any>, subscriber: (state: State<any, EventObject>, parentIds: string[], actors: Map<any, string[]>) => void, { actors, ids: pids }?: {
    actors: Map<any, string[]>;
    ids: string[];
}): void;
export declare function logActorStates(actors: Map<any, string[]>, filename?: string): void;
