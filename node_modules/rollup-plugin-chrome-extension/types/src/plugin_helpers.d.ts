import { Interpreter } from 'xstate';
import type { machine as filesMachine } from './files.machine';
import { CompleteFile, CrxPlugin, Manifest } from './types';
export declare const esmImportWrapperFileNameExt = ".esm-wrapper.js";
export declare const generateFileNames: (fileName: string) => {
    outputFileName: string;
    wrapperFileName: string;
};
export declare const isRPCE: (p: CrxPlugin | null | false | undefined) => boolean;
export declare type RpceApi = {
    /** A map of the emitted files */
    emittedFiles: Map<string, CompleteFile & {
        source?: string | Uint8Array | undefined;
    }>;
    /** The updated root folder, derived from either the Vite config or the manifest dirname */
    readonly root: string;
    /** The files service, used to send events from other plugins */
    service: Interpreter<typeof filesMachine>;
};
export declare function getRpceAPI(plugins: readonly CrxPlugin[]): RpceApi | undefined;
/**
 * Sorts plugins into categories by `plugin.crx` and `plugin.enforce`
 * RPCE is not a CrxPlugin itself, so it is included in `basePlugins`
 */
export declare function categorizePlugins(plugins: CrxPlugin[]): {
    basePlugins: CrxPlugin[];
    prePlugins: CrxPlugin[];
    postPlugins: CrxPlugin[];
    normalPlugins: CrxPlugin[];
};
export declare function combinePlugins(basePlugins: CrxPlugin[], crxPlugins: CrxPlugin[]): CrxPlugin[];
export declare function addToCspScriptSrc(manifest: Manifest, srcs: string[]): Manifest;
/** Work with an id as a URL instance */
export declare const createStubURL: (id?: string) => URL;
