import { EventObject, ExtractEvent, Interpreter, MachineOptions, State, StateConfig, Typestate } from 'xstate';
export declare function narrowEvent<TEvent extends EventObject, TEventType extends TEvent['type']>(event: TEvent, type: TEventType): ExtractEvent<TEvent, TEventType>;
export declare function narrowEvent<TEvent extends EventObject, TEventType extends TEvent['type']>(event: TEvent, type: TEventType[]): ExtractEvent<TEvent, TEventType>;
export interface UseMachineOptions<TContext, TEvent extends EventObject> {
    /**
     * If provided, will be merged with machine's `context`.
     */
    context?: Partial<TContext>;
    /**
     * The state to rehydrate the machine to. The machine will
     * start at this state instead of its `initialState`.
     */
    state?: StateConfig<TContext, TEvent>;
}
export declare const useConfig: <TContext, TEvent extends EventObject>(service: Interpreter<TContext, any, TEvent, any>, options?: Partial<MachineOptions<TContext, TEvent, import("xstate").ActionObject<TContext, TEvent>>>) => void;
export declare const waitForState: <TContext, TEvent extends EventObject, TTypestate extends Typestate<TContext> = {
    value: any;
    context: TContext;
}>(service: Interpreter<TContext, any, TEvent, any>, matcher: (state: State<TContext, TEvent, any, TTypestate>) => boolean) => Promise<State<TContext, TEvent, any, TTypestate>>;
