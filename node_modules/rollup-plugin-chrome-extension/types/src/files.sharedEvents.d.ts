import { ChangeEvent } from 'rollup';
import { EventFrom } from 'xstate';
import { Asset, BaseAsset, CompleteFile, FileType, Script } from './types';
export declare const fileTypes: FileType[];
export declare const isScript: (file: {
    fileType: string;
}) => file is Script;
export declare const sharedEventCreators: {
    ABORT: () => {};
    BUILD_MANIFEST: () => {};
    BUILD_START: () => {};
    CHANGE: (id: string, change: {
        event: ChangeEvent;
    }) => {
        event: ChangeEvent;
        id: string;
    };
    COMPLETE_FILE: (data: {
        id: string;
        fileId: string;
        source?: string | Uint8Array;
    }) => {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    };
    EMIT_FILE: (file: Omit<CompleteFile, 'source' | 'fileId'>) => {
        file: Omit<CompleteFile, "fileId" | "source">;
    };
    EMIT_START: (manifest?: boolean) => {
        manifest: boolean;
    };
    ENQUEUE_FILES: (files: (BaseAsset | Script)[]) => {
        files: ({
            fileType: import("./types").ScriptType;
            fileId?: string | undefined;
            fileName: string;
            id: string;
        } | {
            fileType: import("./types").AssetType;
            fileId?: string | undefined;
            dirName?: string | undefined;
            fileName: string;
            id: string;
        })[];
    };
    ERROR: (error: unknown) => {
        error: unknown;
    };
    EXCLUDE_FILE_TYPE: (fileType: FileType) => {
        fileType: FileType;
    };
    FILE_EXCLUDED: (id: string) => {
        id: string;
    };
    FILE_ID: (input: {
        id: string;
        fileId: string;
    }) => {
        id: string;
        fileId: string;
    };
    GENERATE_BUNDLE: () => {};
    PARSE_RESULT: (fileName: string, files: (BaseAsset | Script)[]) => {
        fileName: string;
        children: (Script | BaseAsset)[];
    };
    PLUGINS_RESULT: (asset: Omit<Required<Asset>, 'fileId' | 'dirName'>) => Omit<Required<Asset>, "fileId" | "dirName">;
    PLUGINS_START: (asset: Omit<Required<Asset>, 'fileId' | 'dirName'>) => Omit<Required<Asset>, "fileId" | "dirName">;
    READY: (id: string) => {
        id: string;
    };
    REMOVE_FILE: (id: string) => {
        id: string;
    };
    RENDER_START: (fileName: string) => {
        fileName: string;
    };
    ROOT: (root: string) => {
        root: string;
    };
    SCRIPT_COMPLETE: (id: string) => {
        id: string;
    };
    SPAWN_FILE: (file: BaseAsset | Script) => {
        file: Script | BaseAsset;
    };
};
export declare type SharedEvent = EventFrom<typeof sharedEventModel>;
export declare const sharedEventModel: import("xstate/lib/model.types").Model<{}, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ABORT: () => {};
    BUILD_MANIFEST: () => {};
    BUILD_START: () => {};
    CHANGE: (id: string, change: {
        event: ChangeEvent;
    }) => {
        event: ChangeEvent;
        id: string;
    };
    COMPLETE_FILE: (data: {
        id: string;
        fileId: string;
        source?: string | Uint8Array;
    }) => {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    };
    EMIT_FILE: (file: Omit<CompleteFile, 'source' | 'fileId'>) => {
        file: Omit<CompleteFile, "fileId" | "source">;
    };
    EMIT_START: (manifest?: boolean) => {
        manifest: boolean;
    };
    ENQUEUE_FILES: (files: (BaseAsset | Script)[]) => {
        files: ({
            fileType: import("./types").ScriptType;
            fileId?: string | undefined;
            fileName: string;
            id: string;
        } | {
            fileType: import("./types").AssetType;
            fileId?: string | undefined;
            dirName?: string | undefined;
            fileName: string;
            id: string;
        })[];
    };
    ERROR: (error: unknown) => {
        error: unknown;
    };
    EXCLUDE_FILE_TYPE: (fileType: FileType) => {
        fileType: FileType;
    };
    FILE_EXCLUDED: (id: string) => {
        id: string;
    };
    FILE_ID: (input: {
        id: string;
        fileId: string;
    }) => {
        id: string;
        fileId: string;
    };
    GENERATE_BUNDLE: () => {};
    PARSE_RESULT: (fileName: string, files: (BaseAsset | Script)[]) => {
        fileName: string;
        children: (Script | BaseAsset)[];
    };
    PLUGINS_RESULT: (asset: Omit<Required<Asset>, 'fileId' | 'dirName'>) => Omit<Required<Asset>, "fileId" | "dirName">;
    PLUGINS_START: (asset: Omit<Required<Asset>, 'fileId' | 'dirName'>) => Omit<Required<Asset>, "fileId" | "dirName">;
    READY: (id: string) => {
        id: string;
    };
    REMOVE_FILE: (id: string) => {
        id: string;
    };
    RENDER_START: (fileName: string) => {
        fileName: string;
    };
    ROOT: (root: string) => {
        root: string;
    };
    SCRIPT_COMPLETE: (id: string) => {
        id: string;
    };
    SPAWN_FILE: (file: BaseAsset | Script) => {
        file: Script | BaseAsset;
    };
}>>, import("xstate").BaseActionObject, import("xstate/lib/model.types").FinalModelCreators<{
    events: {
        ABORT: () => {};
        BUILD_MANIFEST: () => {};
        BUILD_START: () => {};
        CHANGE: (id: string, change: {
            event: ChangeEvent;
        }) => {
            event: ChangeEvent;
            id: string;
        };
        COMPLETE_FILE: (data: {
            id: string;
            fileId: string;
            source?: string | Uint8Array;
        }) => {
            id: string;
            fileId: string;
            source?: string | Uint8Array | undefined;
        };
        EMIT_FILE: (file: Omit<CompleteFile, 'source' | 'fileId'>) => {
            file: Omit<CompleteFile, "fileId" | "source">;
        };
        EMIT_START: (manifest?: boolean) => {
            manifest: boolean;
        };
        ENQUEUE_FILES: (files: (BaseAsset | Script)[]) => {
            files: ({
                fileType: import("./types").ScriptType;
                fileId?: string | undefined;
                fileName: string;
                id: string;
            } | {
                fileType: import("./types").AssetType;
                fileId?: string | undefined;
                dirName?: string | undefined;
                fileName: string;
                id: string;
            })[];
        };
        ERROR: (error: unknown) => {
            error: unknown;
        };
        EXCLUDE_FILE_TYPE: (fileType: FileType) => {
            fileType: FileType;
        };
        FILE_EXCLUDED: (id: string) => {
            id: string;
        };
        FILE_ID: (input: {
            id: string;
            fileId: string;
        }) => {
            id: string;
            fileId: string;
        };
        GENERATE_BUNDLE: () => {};
        PARSE_RESULT: (fileName: string, files: (BaseAsset | Script)[]) => {
            fileName: string;
            children: (Script | BaseAsset)[];
        };
        PLUGINS_RESULT: (asset: Omit<Required<Asset>, 'fileId' | 'dirName'>) => Omit<Required<Asset>, "fileId" | "dirName">;
        PLUGINS_START: (asset: Omit<Required<Asset>, 'fileId' | 'dirName'>) => Omit<Required<Asset>, "fileId" | "dirName">;
        READY: (id: string) => {
            id: string;
        };
        REMOVE_FILE: (id: string) => {
            id: string;
        };
        RENDER_START: (fileName: string) => {
            fileName: string;
        };
        ROOT: (root: string) => {
            root: string;
        };
        SCRIPT_COMPLETE: (id: string) => {
            id: string;
        };
        SPAWN_FILE: (file: BaseAsset | Script) => {
            file: Script | BaseAsset;
        };
    };
}>>;
