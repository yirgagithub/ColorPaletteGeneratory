import { spawnFile } from './files_spawnFile';
import { BaseAsset, FileType, Script } from './types';
export interface FilesContext {
    filesById: Map<string, ReturnType<typeof spawnFile>>;
    filesByName: Map<string, ReturnType<typeof spawnFile>>;
    root: string;
    inputsByName: Map<string, BaseAsset | Script>;
    excluded: Set<FileType>;
}
export declare const model: import("xstate/lib/model.types").Model<FilesContext, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ABORT: () => {};
    BUILD_MANIFEST: () => {};
    BUILD_START: () => {};
    CHANGE: (id: string, change: {
        event: import("rollup").ChangeEvent;
    }) => {
        event: import("rollup").ChangeEvent;
        id: string;
    };
    COMPLETE_FILE: (data: {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    }) => {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    };
    EMIT_FILE: (file: Omit<import("./types").CompleteFile, "fileId" | "source">) => {
        file: Omit<import("./types").CompleteFile, "fileId" | "source">;
    };
    EMIT_START: (manifest?: boolean) => {
        manifest: boolean;
    };
    ENQUEUE_FILES: (files: (Script | BaseAsset)[]) => {
        files: ({
            fileType: import("./types").ScriptType;
            fileId?: string | undefined;
            fileName: string;
            id: string;
        } | {
            fileType: import("./types").AssetType;
            fileId?: string | undefined;
            dirName?: string | undefined;
            fileName: string;
            id: string;
        })[];
    };
    ERROR: (error: unknown) => {
        error: unknown;
    };
    EXCLUDE_FILE_TYPE: (fileType: FileType) => {
        fileType: FileType;
    };
    FILE_EXCLUDED: (id: string) => {
        id: string;
    };
    FILE_ID: (input: {
        id: string;
        fileId: string;
    }) => {
        id: string;
        fileId: string;
    };
    GENERATE_BUNDLE: () => {};
    PARSE_RESULT: (fileName: string, files: (Script | BaseAsset)[]) => {
        fileName: string;
        children: (Script | BaseAsset)[];
    };
    PLUGINS_RESULT: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    PLUGINS_START: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    READY: (id: string) => {
        id: string;
    };
    REMOVE_FILE: (id: string) => {
        id: string;
    };
    RENDER_START: (fileName: string) => {
        fileName: string;
    };
    ROOT: (root: string) => {
        root: string;
    };
    SCRIPT_COMPLETE: (id: string) => {
        id: string;
    };
    SPAWN_FILE: (file: Script | BaseAsset) => {
        file: Script | BaseAsset;
    };
}>>, import("xstate").BaseActionObject, import("xstate/lib/model.types").FinalModelCreators<{
    events: {
        ABORT: () => {};
        BUILD_MANIFEST: () => {};
        BUILD_START: () => {};
        CHANGE: (id: string, change: {
            event: import("rollup").ChangeEvent;
        }) => {
            event: import("rollup").ChangeEvent;
            id: string;
        };
        COMPLETE_FILE: (data: {
            id: string;
            fileId: string;
            source?: string | Uint8Array | undefined;
        }) => {
            id: string;
            fileId: string;
            source?: string | Uint8Array | undefined;
        };
        EMIT_FILE: (file: Omit<import("./types").CompleteFile, "fileId" | "source">) => {
            file: Omit<import("./types").CompleteFile, "fileId" | "source">;
        };
        EMIT_START: (manifest?: boolean) => {
            manifest: boolean;
        };
        ENQUEUE_FILES: (files: (Script | BaseAsset)[]) => {
            files: ({
                fileType: import("./types").ScriptType;
                fileId?: string | undefined;
                fileName: string;
                id: string;
            } | {
                fileType: import("./types").AssetType;
                fileId?: string | undefined;
                dirName?: string | undefined;
                fileName: string;
                id: string;
            })[];
        };
        ERROR: (error: unknown) => {
            error: unknown;
        };
        EXCLUDE_FILE_TYPE: (fileType: FileType) => {
            fileType: FileType;
        };
        FILE_EXCLUDED: (id: string) => {
            id: string;
        };
        FILE_ID: (input: {
            id: string;
            fileId: string;
        }) => {
            id: string;
            fileId: string;
        };
        GENERATE_BUNDLE: () => {};
        PARSE_RESULT: (fileName: string, files: (Script | BaseAsset)[]) => {
            fileName: string;
            children: (Script | BaseAsset)[];
        };
        PLUGINS_RESULT: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
        PLUGINS_START: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
        READY: (id: string) => {
            id: string;
        };
        REMOVE_FILE: (id: string) => {
            id: string;
        };
        RENDER_START: (fileName: string) => {
            fileName: string;
        };
        ROOT: (root: string) => {
            root: string;
        };
        SCRIPT_COMPLETE: (id: string) => {
            id: string;
        };
        SPAWN_FILE: (file: Script | BaseAsset) => {
            file: Script | BaseAsset;
        };
    };
}>>;
/**
 * The files orchestrator manages the loading and parsing
 * behavior of files that Rollup doesn't natively handle:
 * the manifest, css, html, json, images, and other files
 * like fonts, etc.
 *
 * This machine requires some external actions and services:
 *
 * Required actions:
 *   - handleError
 *
 * Required services:
 *   - handleFile
 *   - pluginsRunner
 */
export declare const machine: import("xstate").StateMachine<FilesContext, any, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ABORT: () => {};
    BUILD_MANIFEST: () => {};
    BUILD_START: () => {};
    CHANGE: (id: string, change: {
        event: import("rollup").ChangeEvent;
    }) => {
        event: import("rollup").ChangeEvent;
        id: string;
    };
    COMPLETE_FILE: (data: {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    }) => {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    };
    EMIT_FILE: (file: Omit<import("./types").CompleteFile, "fileId" | "source">) => {
        file: Omit<import("./types").CompleteFile, "fileId" | "source">;
    };
    EMIT_START: (manifest?: boolean) => {
        manifest: boolean;
    };
    ENQUEUE_FILES: (files: (Script | BaseAsset)[]) => {
        files: ({
            fileType: import("./types").ScriptType;
            fileId?: string | undefined;
            fileName: string;
            id: string;
        } | {
            fileType: import("./types").AssetType;
            fileId?: string | undefined;
            dirName?: string | undefined;
            fileName: string;
            id: string;
        })[];
    };
    ERROR: (error: unknown) => {
        error: unknown;
    };
    EXCLUDE_FILE_TYPE: (fileType: FileType) => {
        fileType: FileType;
    };
    FILE_EXCLUDED: (id: string) => {
        id: string;
    };
    FILE_ID: (input: {
        id: string;
        fileId: string;
    }) => {
        id: string;
        fileId: string;
    };
    GENERATE_BUNDLE: () => {};
    PARSE_RESULT: (fileName: string, files: (Script | BaseAsset)[]) => {
        fileName: string;
        children: (Script | BaseAsset)[];
    };
    PLUGINS_RESULT: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    PLUGINS_START: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    READY: (id: string) => {
        id: string;
    };
    REMOVE_FILE: (id: string) => {
        id: string;
    };
    RENDER_START: (fileName: string) => {
        fileName: string;
    };
    ROOT: (root: string) => {
        root: string;
    };
    SCRIPT_COMPLETE: (id: string) => {
        id: string;
    };
    SPAWN_FILE: (file: Script | BaseAsset) => {
        file: Script | BaseAsset;
    };
}>>, {
    value: any;
    context: FilesContext;
}, import("xstate").ActionObject<FilesContext, import("xstate/lib/model.types").UnionFromCreatorsReturnTypes<import("xstate/lib/model.types").FinalEventCreators<{
    ABORT: () => {};
    BUILD_MANIFEST: () => {};
    BUILD_START: () => {};
    CHANGE: (id: string, change: {
        event: import("rollup").ChangeEvent;
    }) => {
        event: import("rollup").ChangeEvent;
        id: string;
    };
    COMPLETE_FILE: (data: {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    }) => {
        id: string;
        fileId: string;
        source?: string | Uint8Array | undefined;
    };
    EMIT_FILE: (file: Omit<import("./types").CompleteFile, "fileId" | "source">) => {
        file: Omit<import("./types").CompleteFile, "fileId" | "source">;
    };
    EMIT_START: (manifest?: boolean) => {
        manifest: boolean;
    };
    ENQUEUE_FILES: (files: (Script | BaseAsset)[]) => {
        files: ({
            fileType: import("./types").ScriptType;
            fileId?: string | undefined;
            fileName: string;
            id: string;
        } | {
            fileType: import("./types").AssetType;
            fileId?: string | undefined;
            dirName?: string | undefined;
            fileName: string;
            id: string;
        })[];
    };
    ERROR: (error: unknown) => {
        error: unknown;
    };
    EXCLUDE_FILE_TYPE: (fileType: FileType) => {
        fileType: FileType;
    };
    FILE_EXCLUDED: (id: string) => {
        id: string;
    };
    FILE_ID: (input: {
        id: string;
        fileId: string;
    }) => {
        id: string;
        fileId: string;
    };
    GENERATE_BUNDLE: () => {};
    PARSE_RESULT: (fileName: string, files: (Script | BaseAsset)[]) => {
        fileName: string;
        children: (Script | BaseAsset)[];
    };
    PLUGINS_RESULT: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    PLUGINS_START: (asset: Omit<Required<import("./types").Asset>, "fileId" | "dirName">) => Omit<Required<import("./types").Asset>, "fileId" | "dirName">;
    READY: (id: string) => {
        id: string;
    };
    REMOVE_FILE: (id: string) => {
        id: string;
    };
    RENDER_START: (fileName: string) => {
        fileName: string;
    };
    ROOT: (root: string) => {
        root: string;
    };
    SCRIPT_COMPLETE: (id: string) => {
        id: string;
    };
    SPAWN_FILE: (file: Script | BaseAsset) => {
        file: Script | BaseAsset;
    };
}>>>>;
