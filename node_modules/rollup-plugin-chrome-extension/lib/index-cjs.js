'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('array-flat-polyfill');
var fs = require('fs-extra');
var fs__default = _interopDefault(fs);
var lodash = require('lodash');
var path = require('path');
var path__default = _interopDefault(path);
var cheerio = _interopDefault(require('cheerio'));
var cosmiconfig = require('cosmiconfig');
var jsonpathPlus = require('jsonpath-plus');
var memoize = _interopDefault(require('mem'));
var slash = _interopDefault(require('slash'));
var fs$1 = require('fs');
var glob = _interopDefault(require('glob'));
var Ajv = _interopDefault(require('ajv'));
var jsonPtr = require('json-ptr');
var rollup = require('rollup');

const not = (fn) => (x) => !fn(x);

function isChunk(
  x,
) {
  return x && x.type === 'chunk'
}

function isAsset(
  x,
) {
  return x.type === 'asset'
}

function isString(x) {
  return typeof x === 'string'
}

function isUndefined(x) {
  return typeof x === 'undefined'
}

function isNull(x) {
  return x === null
}

function isPresent(x) {
  return !isUndefined(x) && !isNull(x)
}

const normalizeFilename = (p) =>
  p.replace(/\.[tj]sx?$/, '.js');

/**
 * Update the manifest source in the output bundle
 */
const updateManifest = 

(
  updater,
  bundle,
  handleError,
) => {
  try {
    const manifestKey = 'manifest.json';
    const manifestAsset = bundle[manifestKey]; 

    if (!manifestAsset) {
      throw new Error(
        'No manifest.json in the rollup output bundle.',
      )
    }

    const manifest = JSON.parse(
      manifestAsset.source ,
    ); 

    const result = updater(manifest);

    manifestAsset.source = JSON.stringify(result, undefined, 2);
  } catch (error) {
    if (handleError) {
      handleError(error.message);
    } else {
      throw error
    }
  }

  return bundle
};

function reduceToRecord(srcDir) {
  if (srcDir === null || typeof srcDir === 'undefined') {
    // This would be a config error, so should throw
    throw new TypeError('srcDir is null or undefined')
  }

  return (
    inputRecord,
    filename,
  ) => {
    const name = path.relative(srcDir, filename)
      .split('.')
      .slice(0, -1)
      .join('.');

    if (name in inputRecord) {
      throw new Error(
        `Script files with different extensions should not share names:\n\n"${filename}"\nwill overwrite\n"${inputRecord[name]}"`,
      )
    }

    return { ...inputRecord, [name]: filename }
  }
}

const loadHtml = (rootPath) => (
  filePath,
) => {
  const htmlCode = fs__default.readFileSync(filePath, 'utf8');
  const $ = cheerio.load(htmlCode);

  return Object.assign($, { filePath, rootPath })
};

const getRelativePath = ({
  filePath,
  rootPath,
}) => (p) => {
  const htmlFileDir = path__default.dirname(filePath);

  let relDir;
  if (p.startsWith('/')) {
    relDir = path__default.relative(process.cwd(), rootPath);
  } else {
    relDir = path__default.relative(process.cwd(), htmlFileDir);
  }

  return path__default.join(relDir, p)
};

/* -------------------- SCRIPTS -------------------- */

const getScriptElems = ($) =>
  $('script')
    .not('[data-rollup-asset]')
    .not('[src^="http:"]')
    .not('[src^="https:"]')
    .not('[src^="data:"]')
    .not('[src^="/"]');

// Mutative action
const mutateScriptElems = ({
  browserPolyfill,
}) => (
  $,
) => {
  getScriptElems($)
    .attr('type', 'module')
    .attr('src', (i, value) => {
      // FIXME: @types/cheerio is wrong for AttrFunction: index.d.ts, line 16
      // declare type AttrFunction = (i: number, currentValue: string) => any;
      // eslint-disable-next-line
      // @ts-ignore
      const replaced = value.replace(/\.[jt]sx?/g, '.js');

      return replaced
    });

  if (browserPolyfill) {
    const head = $('head');
    if (
      browserPolyfill === true ||
      (typeof browserPolyfill === 'object' &&
        browserPolyfill.executeScript)
    ) {
      head.prepend(
        '<script src="/assets/browser-polyfill-executeScript.js"></script>',
      );
    }

    head.prepend(
      '<script src="/assets/browser-polyfill.js"></script>',
    );
  }

  return $
};

const getScripts = ($) =>
  getScriptElems($).toArray();

const getScriptSrc = ($) =>
  getScripts($)
    .map((elem) => $(elem).attr('src'))
    .filter(isString)
    .map(getRelativePath($));

/* ----------------- ASSET SCRIPTS ----------------- */

const getAssets = ($) =>
  $('script')
    .filter('[data-rollup-asset="true"]')
    .not('[src^="http:"]')
    .not('[src^="https:"]')
    .not('[src^="data:"]')
    .not('[src^="/"]')
    .toArray();

const getJsAssets = ($) =>
  getAssets($)
    .map((elem) => $(elem).attr('src'))
    .filter(isString)
    .map(getRelativePath($));

/* -------------------- css ------------------- */

const getCss = ($) =>
  $('link')
    .filter('[rel="stylesheet"]')
    .not('[href^="http:"]')
    .not('[href^="https:"]')
    .not('[href^="data:"]')
    .not('[href^="/"]')
    .toArray();

const getCssHrefs = ($) =>
  getCss($)
    .map((elem) => $(elem).attr('href'))
    .filter(isString)
    .map(getRelativePath($));

/* -------------------- img ------------------- */

const getImgs = ($) =>
  $('img')
    .not('[src^="http://"]')
    .not('[src^="https://"]')
    .not('[src^="data:"]')
    .toArray();

const getFavicons = ($) =>
  $('link[rel="icon"]')
    .not('[href^="http:"]')
    .not('[href^="https:"]')
    .not('[href^="data:"]')
    .toArray();

const getImgSrcs = ($) => {
  return [
    ...getImgs($).map((elem) => $(elem).attr('src')),
    ...getFavicons($).map((elem) => $(elem).attr('href')),
  ]
    .filter(isString)
    .map(getRelativePath($))
};

const isHtml = (path) => /\.html?$/.test(path);

const name = 'html-inputs';

/* ============================================ */
/*                  HTML-INPUTS                 */
/* ============================================ */

function htmlInputs(
  htmlInputsOptions,
  /** Used for testing */
  cache = {
    scripts: [],
    html: [],
    html$: [],
    js: [],
    css: [],
    img: [],
    input: [],
  } ,
) {
  return {
    name,
    cache,

    /* ============================================ */
    /*                 OPTIONS HOOK                 */
    /* ============================================ */

    options(options) {
      // srcDir may be initialized by another plugin
      const { srcDir } = htmlInputsOptions;

      if (srcDir) {
        cache.srcDir = srcDir;
      } else {
        throw new TypeError('options.srcDir not initialized')
      }

      // Skip if cache.input exists
      // cache is dumped in watchChange hook

      // Parse options.input to array
      let input;
      if (typeof options.input === 'string') {
        input = [options.input];
      } else if (Array.isArray(options.input)) {
        input = [...options.input];
      } else if (typeof options.input === 'object') {
        input = Object.values(options.input);
      } else {
        throw new TypeError(
          `options.input cannot be ${typeof options.input}`,
        )
      }

      /* ------------------------------------------------- */
      /*                 HANDLE HTML FILES                 */
      /* ------------------------------------------------- */

      // Filter htm and html files
      cache.html = input.filter(isHtml);

      // If no html files, do nothing
      if (cache.html.length === 0) return options

      // If the cache has been dumped, reload from files
      if (cache.html$.length === 0) {
        // This is all done once
        cache.html$ = cache.html.map(loadHtml(srcDir));

        cache.js = lodash.flatten(cache.html$.map(getScriptSrc));
        cache.css = lodash.flatten(cache.html$.map(getCssHrefs));
        cache.img = lodash.flatten(cache.html$.map(getImgSrcs));
        cache.scripts = lodash.flatten(cache.html$.map(getJsAssets));

        // Cache jsEntries with existing options.input
        cache.input = input.filter(not(isHtml)).concat(cache.js);

        // Prepare cache.html$ for asset emission
        cache.html$.forEach(mutateScriptElems(htmlInputsOptions));

        if (cache.input.length === 0) {
          throw new Error(
            'At least one HTML file must have at least one script.',
          )
        }
      }

      // TODO: simply remove HTML files from options.input
      // - Parse HTML and emit chunks and assets in buildStart
      return {
        ...options,
        input: cache.input.reduce(
          reduceToRecord(htmlInputsOptions.srcDir),
          {},
        ),
      }
    },

    /* ============================================ */
    /*              HANDLE FILE CHANGES             */
    /* ============================================ */

    async buildStart() {
      const { srcDir } = htmlInputsOptions;

      if (srcDir) {
        cache.srcDir = srcDir;
      } else {
        throw new TypeError('options.srcDir not initialized')
      }

      const assets = [
        ...cache.css,
        ...cache.img,
        ...cache.scripts,
      ];

      assets.concat(cache.html).forEach((asset) => {
        this.addWatchFile(asset);
      });

      const emitting = assets.map(async (asset) => {
        // Read these files as Buffers
        const source = await fs.readFile(asset);
        const fileName = path.relative(srcDir, asset);

        this.emitFile({
          type: 'asset',
          source, // Buffer
          fileName,
        });
      });

      cache.html$.map(($) => {
        const source = $.html();
        const fileName = path.relative(srcDir, $.filePath);

        this.emitFile({
          type: 'asset',
          source, // String
          fileName,
        });
      });

      await Promise.all(emitting);
    },

    watchChange(id) {
      if (id.endsWith('.html') || id.endsWith('manifest.json')) {
        // Dump cache if html file or manifest changes
        cache.html$ = [];
      }
    },
  }
}

const code = "(function () {\n\t'use strict';\n\n\tconst importPath = /*@__PURE__*/JSON.parse('%PATH%');\n\n\timport(chrome.runtime.getURL(importPath));\n\n}());\n";

function isMV2(
  m,
) {
  if (!isPresent(m)) throw new TypeError('manifest is undefined')
  return m.manifest_version === 2
}

function isMV3(
  m,
) {
  if (!isPresent(m)) throw new TypeError('manifest is undefined')
  return m.manifest_version === 3
}

const cloneObject = (obj) => JSON.parse(JSON.stringify(obj));

const code$1 = "(function () {\n  'use strict';\n\n  function delay(ms) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    })\n  }\n\n  function captureEvents(events) {\n    const captured = events.map(captureEvent);\n\n    return () => captured.forEach((t) => t())\n\n    function captureEvent(event) {\n      let isCapturePhase = true;\n\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      const callbacks = new Map();\n      const eventArgs = new Set();\n\n      // This is the only listener for the native event\n      event.addListener(handleEvent);\n\n      function handleEvent(...args) {\n        if (isCapturePhase) {\n          // This is before dynamic import completes\n          eventArgs.add(args);\n\n          if (typeof args[2] === 'function') {\n            // During capture phase all messages are async\n            return true\n          } else {\n            // Sync messages or some other event\n            return false\n          }\n        } else {\n          // The callbacks determine the listener return value\n          return callListeners(...args)\n        }\n      }\n\n      // Called when dynamic import is complete\n      //  and when subsequent events fire\n      function callListeners(...args) {\n        let isAsyncCallback = false;\n        callbacks.forEach((options, cb) => {\n          // A callback error should not affect the other callbacks\n          try {\n            isAsyncCallback = cb(...args) || isAsyncCallback;\n          } catch (error) {\n            console.error(error);\n          }\n        });\n\n        if (!isAsyncCallback && typeof args[2] === 'function') {\n          // We made this an async message callback during capture phase\n          //   when the function handleEvent returned true\n          //   so we are responsible to call sendResponse\n          // If the callbacks are sync message callbacks\n          //   the sendMessage callback on the other side\n          //   resolves with no arguments (this is the same behavior)\n          args[2]();\n        }\n\n        // Support events after import is complete\n        return isAsyncCallback\n      }\n\n      // This function will trigger this Event with our stored args\n      function triggerEvents() {\n        // Fire each event for this Event\n        eventArgs.forEach((args) => {\n          callListeners(...args);\n        });\n\n        // Dynamic import is complete\n        isCapturePhase = false;\n        // Don't need these anymore\n        eventArgs.clear();\n      }\n\n      // All future listeners are handled by our code\n      event.addListener = function addListener(cb, ...options) {\n        callbacks.set(cb, options);\n      };\n\n      event.hasListeners = function hasListeners() {\n        return callbacks.size > 0\n      };\n\n      event.hasListener = function hasListener(cb) {\n        return callbacks.has(cb)\n      };\n\n      event.removeListener = function removeListener(cb) {\n        callbacks.delete(cb);\n      };\n\n      event.__isCapturedEvent = true;\n\n      return triggerEvents\n    }\n  }\n\n  function resolvePath(object, path, defaultValue) {\n    return path.split('.').reduce((o, p) => (o ? o[p] : defaultValue), object) \n  }\n\n  const eventPaths = /*@__PURE__*/JSON.parse('%EVENTS%'); \n  const importPath = /*@__PURE__*/JSON.parse('%PATH%'); \n  const delayLength = /*@__PURE__*/JSON.parse('%DELAY%');\n\n  const events = eventPaths.map((eventPath) => resolvePath(chrome, eventPath));\n  const triggerEvents = captureEvents(events);\n\n  import(importPath).then(async () => {\n    if (delayLength) await delay(delayLength);\n\n    triggerEvents();\n  });\n\n}());\n";

const code$2 = "(function () {\n  'use strict';\n\n  function captureEvents(events) {\n    const captured = events.map(captureEvent);\n\n    return () => captured.forEach((t) => t())\n\n    function captureEvent(event) {\n      let isCapturePhase = true;\n\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      const callbacks = new Map();\n      const eventArgs = new Set();\n\n      // This is the only listener for the native event\n      event.addListener(handleEvent);\n\n      function handleEvent(...args) {\n        if (isCapturePhase) {\n          // This is before dynamic import completes\n          eventArgs.add(args);\n\n          if (typeof args[2] === 'function') {\n            // During capture phase all messages are async\n            return true\n          } else {\n            // Sync messages or some other event\n            return false\n          }\n        } else {\n          // The callbacks determine the listener return value\n          return callListeners(...args)\n        }\n      }\n\n      // Called when dynamic import is complete\n      //  and when subsequent events fire\n      function callListeners(...args) {\n        let isAsyncCallback = false;\n        callbacks.forEach((options, cb) => {\n          // A callback error should not affect the other callbacks\n          try {\n            isAsyncCallback = cb(...args) || isAsyncCallback;\n          } catch (error) {\n            console.error(error);\n          }\n        });\n\n        if (!isAsyncCallback && typeof args[2] === 'function') {\n          // We made this an async message callback during capture phase\n          //   when the function handleEvent returned true\n          //   so we are responsible to call sendResponse\n          // If the callbacks are sync message callbacks\n          //   the sendMessage callback on the other side\n          //   resolves with no arguments (this is the same behavior)\n          args[2]();\n        }\n\n        // Support events after import is complete\n        return isAsyncCallback\n      }\n\n      // This function will trigger this Event with our stored args\n      function triggerEvents() {\n        // Fire each event for this Event\n        eventArgs.forEach((args) => {\n          callListeners(...args);\n        });\n\n        // Dynamic import is complete\n        isCapturePhase = false;\n        // Don't need these anymore\n        eventArgs.clear();\n      }\n\n      // All future listeners are handled by our code\n      event.addListener = function addListener(cb, ...options) {\n        callbacks.set(cb, options);\n      };\n\n      event.hasListeners = function hasListeners() {\n        return callbacks.size > 0\n      };\n\n      event.hasListener = function hasListener(cb) {\n        return callbacks.has(cb)\n      };\n\n      event.removeListener = function removeListener(cb) {\n        callbacks.delete(cb);\n      };\n\n      event.__isCapturedEvent = true;\n\n      return triggerEvents\n    }\n  }\n\n  function delay(ms) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    })\n  }\n\n  /**\n   * Get matches from an object of nested objects\n   *\n   * @export\n   * @template T Type of matches\n   * @param {*} object Parent object to search\n   * @param {(x: any) => boolean} pred A predicate function that will receive each property value of an object\n   * @param {string[]} excludeKeys Exclude a property if the key exactly matches\n   * @returns {T[]} The matched values from the parent object\n   */\n  function getDeepMatches(object, pred, excludeKeys) {\n    const keys = typeof object === 'object' && object ? Object.keys(object) : [];\n\n    return keys.length\n      ? keys\n          .filter((key) => !excludeKeys.includes(key))\n          .reduce((r, key) => {\n            const target = object[key];\n\n            if (target && pred(target)) {\n              return [...r, target]\n            } else {\n              return [...r, ...getDeepMatches(target, pred, excludeKeys)]\n            }\n          }, [] )\n      : []\n  }\n\n  const importPath = /*@__PURE__*/JSON.parse('%PATH%'); \n  const delayLength = /*@__PURE__*/JSON.parse('%DELAY%'); \n  const excludedPaths = /*@__PURE__*/JSON.parse('%EXCLUDE%');\n\n  const events = getDeepMatches(\n    chrome,\n    (x) => typeof x === 'object' && 'addListener' in x,\n    // The webRequest API is not compatible with event pages\n    //  TODO: this can be removed\n    //   if we stop using this wrapper with \"webRequest\" permission\n    excludedPaths.concat(['webRequest']),\n  );\n  const triggerEvents = captureEvents(events);\n\n  import(importPath).then(async () => {\n    if (delayLength) await delay(delayLength);\n\n    triggerEvents();\n  });\n\n}());\n";

/**
 * This options object allows fine-tuning of the dynamic import wrapper.
 *
 * @export
 * @interface DynamicImportWrapper
 */









// FEATURE: add static code analysis for wake events
//  - This will be slower...
function prepImportWrapperScript({
  eventDelay = 0,
  wakeEvents = [],
  excludeNames = ['extension'],
}) {
  const delay = JSON.stringify(eventDelay);
  const events = wakeEvents.length
    ? JSON.stringify(
        wakeEvents.map((ev) => ev.replace(/^chrome\./, '')),
      )
    : false;
  const exclude = JSON.stringify(excludeNames);

  const script = (events
    ? code$1.replace('%EVENTS%', events)
    : code$2.replace('%EXCLUDE%', exclude)
  ).replace('%DELAY%', delay);

  return script
}

const isManifestFileName = (filename) =>
  path.basename(filename).startsWith('manifest');

const validateFileName = (
  filename,
  { input },
) => {
  if (isUndefined(filename))
    throw new Error(
      `Could not find manifest in Rollup options.input: ${JSON.stringify(
        input,
      )}`,
    )
  if (!fs$1.existsSync(filename))
    throw new Error(
      `Could not load manifest: ${filename} does not exist`,
    )

  return filename
};

function getInputManifestPath(
  options,
)



 {
  if (Array.isArray(options.input)) {
    const manifestIndex = options.input.findIndex(
      isManifestFileName,
    );
    const inputAry = [
      ...options.input.slice(0, manifestIndex),
      ...options.input.slice(manifestIndex + 1),
    ];
    const inputManifestPath = validateFileName(
      options.input[manifestIndex],
      options,
    );

    return { inputManifestPath, inputAry }
  } else if (typeof options.input === 'object') {
    const inputManifestPath = validateFileName(
      options.input.manifest,
      options,
    );
    const inputObj = cloneObject(options.input);
    delete inputObj['manifest'];

    return { inputManifestPath, inputObj }
  } else if (isString(options.input)) {
    const inputManifestPath = validateFileName(
      options.input,
      options,
    );
    return { inputManifestPath }
  }

  throw new TypeError(
    `Rollup options.input cannot be type "${typeof options.input}"`,
  )
}

const combinePerms = (
  ...permissions
) => {
  const { perms, xperms } = (permissions.flat(
    Infinity,
  ) )
    .filter((perm) => typeof perm !== 'undefined')
    .reduce(
      ({ perms, xperms }, perm) => {
        if (perm.startsWith('!')) {
          xperms.add(perm.slice(1));
        } else {
          perms.add(perm);
        }

        return { perms, xperms }
      },
      { perms: new Set(), xperms: new Set() },
    );

  return [...perms].filter((p) => !xperms.has(p))
};

/* ============================================ */
/*               CHECK PERMISSIONS              */
/* ============================================ */

// export const debugger = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*debugger/.test(s)
// export const enterprise.deviceAttributes = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*enterprise\.deviceAttributes/.test(s)
// export const enterprise.hardwarePlatform = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*enterprise\.hardwarePlatform/.test(s)
// export const enterprise.platformKeys = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*enterprise\.platformKeys/.test(s)
// export const networking.config = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*networking\.config/.test(s)
// export const system.cpu = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*system\.cpu/.test(s)
// export const system.display = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*system\.display/.test(s)
// export const system.memory = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*system\.memory/.test(s)
// export const system.storage = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*system\.storage/.test(s)

const alarms = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*alarms/.test(s);

const bookmarks = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*bookmarks/.test(s);

const contentSettings = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*contentSettings/.test(s);

const contextMenus = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*contextMenus/.test(s);

const cookies = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*cookies/.test(s);

const declarativeContent = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*declarativeContent/.test(s);
const declarativeNetRequest = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*declarativeNetRequest/.test(s);
const declarativeWebRequest = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*declarativeWebRequest/.test(s);
const desktopCapture = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*desktopCapture/.test(s);
const displaySource = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*displaySource/.test(s);
const dns = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*dns/.test(s);
const documentScan = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*documentScan/.test(s);
const downloads = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*downloads/.test(s);
const experimental = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*experimental/.test(s);
const fileBrowserHandler = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*fileBrowserHandler/.test(s);
const fileSystemProvider = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*fileSystemProvider/.test(s);
const fontSettings = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*fontSettings/.test(s);
const gcm = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*gcm/.test(s);
const geolocation = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*geolocation/.test(s);
const history = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*history/.test(s);
const identity = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*identity/.test(s);
const idle = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*idle/.test(s);
const idltest = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*idltest/.test(s);
const management = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*management/.test(s);
const nativeMessaging = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*nativeMessaging/.test(s);
const notifications = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*notifications/.test(s);
const pageCapture = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*pageCapture/.test(s);
const platformKeys = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*platformKeys/.test(s);
const power = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*power/.test(s);
const printerProvider = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*printerProvider/.test(s);
const privacy = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*privacy/.test(s);
const processes = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*processes/.test(s);
const proxy = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*proxy/.test(s);
const sessions = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*sessions/.test(s);
const signedInDevices = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*signedInDevices/.test(s);
const storage = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*storage/.test(s);
const tabCapture = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*tabCapture/.test(s);
// export const tabs = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*tabs/.test(s)
const topSites = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*topSites/.test(s);
const tts = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*tts/.test(s);
const ttsEngine = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*ttsEngine/.test(s);
const unlimitedStorage = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*unlimitedStorage/.test(s);
const vpnProvider = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*vpnProvider/.test(s);
const wallpaper = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*wallpaper/.test(s);
const webNavigation = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*webNavigation/.test(s);
const webRequest = (s) =>
  /((chromep?)|(browser))[\s\n]*\.[\s\n]*webRequest/.test(s);
const webRequestBlocking = (s) =>
  webRequest(s) && s.includes('\'blocking\'');

// TODO: add readClipboard
// TODO: add writeClipboard

var permissions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  alarms: alarms,
  bookmarks: bookmarks,
  contentSettings: contentSettings,
  contextMenus: contextMenus,
  cookies: cookies,
  declarativeContent: declarativeContent,
  declarativeNetRequest: declarativeNetRequest,
  declarativeWebRequest: declarativeWebRequest,
  desktopCapture: desktopCapture,
  displaySource: displaySource,
  dns: dns,
  documentScan: documentScan,
  downloads: downloads,
  experimental: experimental,
  fileBrowserHandler: fileBrowserHandler,
  fileSystemProvider: fileSystemProvider,
  fontSettings: fontSettings,
  gcm: gcm,
  geolocation: geolocation,
  history: history,
  identity: identity,
  idle: idle,
  idltest: idltest,
  management: management,
  nativeMessaging: nativeMessaging,
  notifications: notifications,
  pageCapture: pageCapture,
  platformKeys: platformKeys,
  power: power,
  printerProvider: printerProvider,
  privacy: privacy,
  processes: processes,
  proxy: proxy,
  sessions: sessions,
  signedInDevices: signedInDevices,
  storage: storage,
  tabCapture: tabCapture,
  topSites: topSites,
  tts: tts,
  ttsEngine: ttsEngine,
  unlimitedStorage: unlimitedStorage,
  vpnProvider: vpnProvider,
  wallpaper: wallpaper,
  webNavigation: webNavigation,
  webRequest: webRequest,
  webRequestBlocking: webRequestBlocking
});

/* ============================================ */
/*              DERIVE PERMISSIONS              */
/* ============================================ */

const derivePermissions = (
  set,
  { code },
) =>
  Object.entries(permissions)
    .filter(([key]) => key !== 'default')
    .filter(([, fn]) => fn(code))
    .map(([key]) => key)
    .reduce((s, p) => s.add(p), set);

/* -------------------------------------------- */
/*                 DERIVE FILES                 */
/* -------------------------------------------- */

function deriveFiles(
  manifest,
  srcDir,
  options,
) {
  if (manifest.manifest_version === 3) {
    return deriveFilesMV3(manifest, srcDir, options)
  } else {
    return deriveFilesMV2(manifest, srcDir, options)
  }
}

function deriveFilesMV3(
  manifest,
  srcDir,
  options,
) {
  const locales = isString(manifest.default_locale)
    ? ['_locales/**/messages.json']
    : [];

  const files = lodash.get(
    manifest,
    'web_accessible_resources',
    [] ,
  )
    .flatMap(({ resources }) => resources)
    .concat(locales)
    .reduce((r, x) => {
      if (glob.hasMagic(x)) {
        const files = glob.sync(x, { cwd: srcDir });
        return [...r, ...files.map((f) => f.replace(srcDir, ''))]
      } else {
        return [...r, x]
      }
    }, [] );

  const contentScripts = lodash.get(
    manifest,
    'content_scripts',
    [] ,
  ).reduce((r, { js = [] }) => [...r, ...js], [] );

  const js = [
    ...files.filter((f) => /\.[jt]sx?$/.test(f)),
    lodash.get(manifest, 'background.service_worker'),
    ...(options.contentScripts ? contentScripts : []),
  ];

  const html = [
    ...files.filter((f) => /\.html?$/.test(f)),
    lodash.get(manifest, 'options_page'),
    lodash.get(manifest, 'options_ui.page'),
    lodash.get(manifest, 'devtools_page'),
    lodash.get(manifest, 'action.default_popup'),
    ...Object.values(lodash.get(manifest, 'chrome_url_overrides', {})),
  ];

  const css = [
    ...files.filter((f) => f.endsWith('.css')),
    ...lodash.get(
      manifest,
      'content_scripts',
      [] ,
    ).reduce(
      (r, { css = [] }) => [...r, ...css],
      [] ,
    ),
  ];

  const img = [
    ...files.filter((f) =>
      /\.(jpe?g|png|svg|tiff?|gif|webp|bmp|ico)$/i.test(f),
    ),
    ...(Object.values(lodash.get(manifest, 'icons', {})) ),
    ...(Object.values(
      lodash.get(manifest, 'action.default_icon', {}),
    ) ),
  ];

  // Files like fonts, things that are not expected
  const others = lodash.difference(files, css, contentScripts, js, html, img);

  return {
    css: validate(css),
    contentScripts: validate(contentScripts),
    js: validate(js),
    html: validate(html),
    img: validate(img),
    others: validate(others),
  }

  function validate(ary) {
    return [...new Set(ary.filter(isString))].map((x) =>
      path.join(srcDir, x),
    )
  }
}

function deriveFilesMV2(
  manifest,
  srcDir,
  options,
) {
  const locales = isString(manifest.default_locale)
    ? ['_locales/**/messages.json']
    : [];

  const files = lodash.get(
    manifest,
    'web_accessible_resources',
    [] ,
  )
    .concat(locales)
    .reduce((r, x) => {
      if (glob.hasMagic(x)) {
        const files = glob.sync(x, { cwd: srcDir });
        return [...r, ...files.map((f) => f.replace(srcDir, ''))]
      } else {
        return [...r, x]
      }
    }, [] );

  const contentScripts = lodash.get(
    manifest,
    'content_scripts',
    [] ,
  ).reduce((r, { js = [] }) => [...r, ...js], [] );
  const js = [
    ...files.filter((f) => /\.[jt]sx?$/.test(f)),
    ...lodash.get(manifest, 'background.scripts', [] ),
    ...(options.contentScripts ? contentScripts : []),
  ];

  const html = [
    ...files.filter((f) => /\.html?$/.test(f)),
    lodash.get(manifest, 'background.page'),
    lodash.get(manifest, 'options_page'),
    lodash.get(manifest, 'options_ui.page'),
    lodash.get(manifest, 'devtools_page'),
    lodash.get(manifest, 'browser_action.default_popup'),
    lodash.get(manifest, 'page_action.default_popup'),
    ...Object.values(lodash.get(manifest, 'chrome_url_overrides', {})),
  ];

  const css = [
    ...files.filter((f) => f.endsWith('.css')),
    ...lodash.get(
      manifest,
      'content_scripts',
      [] ,
    ).reduce(
      (r, { css = [] }) => [...r, ...css],
      [] ,
    ),
  ];

  const actionIconSet = [
    'browser_action.default_icon',
    'page_action.default_icon',
  ].reduce((set, query) => {
    const result = lodash.get(
      manifest,
      query,
      {},
    );

    if (typeof result === 'string') {
      set.add(result);
    } else {
      Object.values(result).forEach((x) => set.add(x));
    }

    return set
  }, new Set());

  const img = [
    ...actionIconSet,
    ...files.filter((f) =>
      /\.(jpe?g|png|svg|tiff?|gif|webp|bmp|ico)$/i.test(f),
    ),
    ...Object.values(lodash.get(manifest, 'icons', {})),
  ];

  // Files like fonts, things that are not expected
  const others = lodash.difference(files, css, contentScripts, js, html, img);

  return {
    css: validate(css),
    contentScripts: validate(contentScripts),
    js: validate(js),
    html: validate(html),
    img: validate(img),
    others: validate(others),
  }

  function validate(ary) {
    return [...new Set(ary.filter(isString))].map((x) =>
      path.join(srcDir, x),
    )
  }
}

var $id = "https://extend-chrome.dev/schema/manifest-strict.schema.json";
var $schema = "http://json-schema.org/draft-07/schema#";
var required = [
	"manifest_version",
	"name",
	"version"
];
var then = {
	$ref: "./manifest-v3.schema.json"
};
var schema = {
	$id: $id,
	$schema: $schema,
	required: required,
	"if": {
	properties: {
		manifest_version: {
			type: "number",
			"enum": [
				3
			]
		}
	}
},
	then: then,
	"else": {
	$ref: "./manifest-v2.schema.json"
}
};

var $id$1 = "https://extend-chrome.dev/schema/manifest-v2.schema.json";
var $schema$1 = "http://json-schema.org/draft-07/schema#";
var additionalProperties = true;
var definitions = {
	action: {
		dependencies: {
			icons: {
				not: {
					required: [
						"icons"
					]
				}
			},
			name: {
				not: {
					required: [
						"name"
					]
				}
			},
			popup: {
				not: {
					required: [
						"popup"
					]
				}
			}
		},
		properties: {
			default_icon: {
				anyOf: [
					{
						description: "FIXME: String form is deprecated.",
						type: "string"
					},
					{
						description: "Icon for the main toolbar.",
						properties: {
							"19": {
								$ref: "#/definitions/icon"
							},
							"38": {
								$ref: "#/definitions/icon"
							}
						},
						type: "object"
					}
				]
			},
			default_popup: {
				$ref: "#/definitions/uri",
				description: "The popup appears when the user clicks the icon."
			},
			default_title: {
				description: "Tooltip for the main toolbar icon.",
				type: "string"
			}
		},
		type: "object"
	},
	command: {
		additionalProperties: false,
		properties: {
			description: {
				type: "string"
			},
			suggested_key: {
				additionalProperties: false,
				patternProperties: {
					"^(default|mac|windows|linux|chromeos)$": {
						pattern: "^(Ctrl|Command|MacCtrl|Alt|Option)\\+(Shift\\+)?[A-Z]",
						type: "string"
					}
				},
				type: "object"
			}
		},
		type: "object"
	},
	content_security_policy: {
		"default": "script-src 'self'; object-src 'self'",
		description: "This introduces some fairly strict policies that will make extensions more secure by default, and provides you with the ability to create and enforce rules governing the types of content that can be loaded and executed by your extensions and applications.",
		format: "content-security-policy",
		type: "string"
	},
	glob_pattern: {
		format: "glob-pattern",
		type: "string"
	},
	icon: {
		$ref: "#/definitions/uri"
	},
	match_pattern: {
		format: "match-pattern",
		pattern: "^((\\*|http|https|file|ftp|chrome-extension):\\/\\/(\\*|(([^/*:]+:(\\d{1,5}|\\*)))|(\\*.[^\\/*:]+)|[^\\/*:]+)?(\\/.*))|<all_urls>$",
		type: "string"
	},
	mime_type: {
		format: "mime-type",
		pattern: "^(?:application|audio|image|message|model|multipart|text|video)\\/[-+.\\w]+$",
		type: "string"
	},
	page: {
		$ref: "#/definitions/uri"
	},
	permissions: {
		items: {
			format: "permission",
			type: "string"
		},
		type: "array",
		uniqueItems: true
	},
	scripts: {
		items: {
			$ref: "#/definitions/uri"
		},
		minItems: 1,
		type: "array",
		uniqueItems: true
	},
	uri: {
		type: "string"
	},
	version_string: {
		pattern: "^(?:\\d{1,5}\\.){0,3}\\d{1,5}$",
		type: "string"
	}
};
var dependencies = {
	browser_action: {
		not: {
			required: [
				"page_action"
			]
		}
	},
	content_scripts: {
		not: {
			required: [
				"script_badge"
			]
		}
	},
	page_action: {
		not: {
			required: [
				"browser_action"
			]
		}
	},
	script_badge: {
		not: {
			required: [
				"content_scripts"
			]
		}
	}
};
var properties = {
	action: {
		not: {
		}
	},
	background: {
		dependencies: {
			page: {
				not: {
					required: [
						"scripts"
					]
				}
			},
			scripts: {
				not: {
					required: [
						"page"
					]
				}
			}
		},
		description: "The background page is an HTML page that runs in the extension process. It exists for the lifetime of your extension, and only one instance of it at a time is active.",
		properties: {
			page: {
				$ref: "#/definitions/page",
				"default": "background.html",
				description: "Specify the HTML of the background page."
			},
			persistent: {
				"default": true,
				description: "When false, makes the background page an event page (loaded only when needed).",
				type: "boolean"
			},
			scripts: {
				$ref: "#/definitions/scripts",
				"default": [
					"background.js"
				],
				description: "A background page will be generated by the extension system that includes each of the files listed in the scripts property."
			},
			service_worker: {
				not: {
				}
			},
			type: {
				not: {
				}
			}
		},
		type: "object"
	},
	browser_action: {
		$ref: "#/definitions/action",
		description: "Use browser actions to put icons in the main Google Chrome toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup."
	},
	chrome_settings_overrides: {
	},
	chrome_url_overrides: {
		additionalProperties: false,
		description: "Override pages are a way to substitute an HTML file from your extension for a page that Google Chrome normally provides.",
		maxProperties: 1,
		properties: {
			bookmarks: {
				$ref: "#/definitions/page",
				"default": "bookmarks.html",
				description: "The page that appears when the user chooses the Bookmark Manager menu item from the Chrome menu or, on Mac, the Bookmark Manager item from the Bookmarks menu. You can also get to this page by entering the URL chrome://bookmarks."
			},
			history: {
				$ref: "#/definitions/page",
				"default": "history.html",
				description: "The page that appears when the user chooses the History menu item from the Chrome menu or, on Mac, the Show Full History item from the History menu. You can also get to this page by entering the URL chrome://history."
			},
			newtab: {
				$ref: "#/definitions/page",
				"default": "newtab.html",
				description: "The page that appears when the user creates a new tab or window. You can also get to this page by entering the URL chrome://newtab."
			}
		},
		type: "object"
	},
	commands: {
		description: "Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the extension.",
		patternProperties: {
			".*": {
				$ref: "#/definitions/command"
			},
			"^_execute_browser_action$": {
				$ref: "#/definitions/command"
			},
			"^_execute_page_action$": {
				$ref: "#/definitions/command"
			}
		},
		type: "object"
	},
	content_pack: {
	},
	content_scripts: {
		description: "Content scripts are JavaScript files that run in the context of web pages.",
		items: {
			additionalProperties: false,
			properties: {
				all_frames: {
					"default": false,
					description: "Controls whether the content script runs in all frames of the matching page, or only the top frame.",
					type: "boolean"
				},
				css: {
					description: "The list of CSS files to be injected into matching pages. These are injected in the order they appear in this array, before any DOM is constructed or displayed for the page.",
					items: {
						$ref: "#/definitions/uri"
					},
					type: "array",
					uniqueItems: true
				},
				exclude_globs: {
					description: "Applied after matches to exclude URLs that match this glob. Intended to emulate the @exclude Greasemonkey keyword.",
					items: {
						$ref: "#/definitions/glob_pattern"
					},
					type: "array",
					uniqueItems: true
				},
				exclude_matches: {
					description: "Excludes pages that this content script would otherwise be injected into.",
					items: {
						$ref: "#/definitions/match_pattern"
					},
					type: "array",
					uniqueItems: true
				},
				include_globs: {
					description: "Applied after matches to include only those URLs that also match this glob. Intended to emulate the @include Greasemonkey keyword.",
					items: {
						$ref: "#/definitions/glob_pattern"
					},
					type: "array",
					uniqueItems: true
				},
				js: {
					$ref: "#/definitions/scripts",
					description: "The list of JavaScript files to be injected into matching pages. These are injected in the order they appear in this array."
				},
				match_about_blank: {
					"default": false,
					description: "Whether to insert the content script on about:blank and about:srcdoc.",
					type: "boolean"
				},
				matches: {
					description: "Specifies which pages this content script will be injected into.",
					items: {
						$ref: "#/definitions/match_pattern"
					},
					minItems: 1,
					type: "array",
					uniqueItems: true
				},
				run_at: {
					"default": "document_idle",
					description: "Controls when the files in js are injected.",
					"enum": [
						"document_start",
						"document_end",
						"document_idle"
					],
					type: "string"
				}
			},
			required: [
				"matches"
			],
			type: "object"
		},
		minItems: 1,
		type: "array",
		uniqueItems: true
	},
	content_security_policy: {
		$ref: "#/definitions/content_security_policy"
	},
	current_locale: {
	},
	default_locale: {
		"default": "en",
		description: "Specifies the subdirectory of _locales that contains the default strings for this extension.",
		type: "string"
	},
	description: {
		description: "A plain text description of the extension",
		maxLength: 132,
		type: "string"
	},
	devtools_page: {
		$ref: "#/definitions/page",
		description: "A DevTools extension adds functionality to the Chrome DevTools. It can add new UI panels and sidebars, interact with the inspected page, get information about network requests, and more."
	},
	externally_connectable: {
		description: "Declares which extensions, apps, and web pages can connect to your extension via runtime.connect and runtime.sendMessage.",
		items: {
			additionalProperties: false,
			properties: {
				accepts_tls_channel_id: {
					"default": false,
					description: "Indicates that the extension would like to make use of the TLS channel ID of the web page connecting to it. The web page must also opt to send the TLS channel ID to the extension via setting includeTlsChannelId to true in runtime.connect's connectInfo or runtime.sendMessage's options.",
					type: "boolean"
				},
				ids: {
					items: {
						description: "The IDs of extensions or apps that are allowed to connect. If left empty or unspecified, no extensions or apps can connect.",
						type: "string"
					},
					type: "array"
				},
				matches: {
					items: {
						description: "The URL patterns for web pages that are allowed to connect. This does not affect content scripts. If left empty or unspecified, no web pages can connect.",
						type: "string"
					},
					type: "array"
				}
			},
			type: "object"
		},
		type: "object"
	},
	file_browser_handlers: {
		description: "You can use this API to enable users to upload files to your website.",
		items: {
			additionalProperties: false,
			properties: {
				default_title: {
					description: "What the button will display.",
					type: "string"
				},
				file_filters: {
					description: "Filetypes to match.",
					items: {
						type: "string"
					},
					minItems: 1,
					type: "array"
				},
				id: {
					description: "Used by event handling code to differentiate between multiple file handlers",
					type: "string"
				}
			},
			required: [
				"id",
				"default_title",
				"file_filters"
			],
			type: "object"
		},
		minItems: 1,
		type: "array"
	},
	homepage_url: {
		$ref: "#/definitions/uri",
		description: "The URL of the homepage for this extension."
	},
	icons: {
		description: "One or more icons that represent the extension, app, or theme. Recommended format: PNG; also BMP, GIF, ICO, JPEG.",
		minProperties: 1,
		properties: {
			"16": {
				$ref: "#/definitions/icon",
				description: "Used as the favicon for an extension's pages and infobar."
			},
			"48": {
				$ref: "#/definitions/icon",
				description: "Used on the extension management page (chrome://extensions)."
			},
			"128": {
				$ref: "#/definitions/icon",
				description: "Used during installation and in the Chrome Web Store."
			},
			"256": {
				$ref: "#/definitions/icon",
				description: "Used during installation and in the Chrome Web Store."
			}
		},
		type: "object"
	},
	"import": {
	},
	incognito: {
		"default": "spanning",
		description: "Specify how this extension will behave if allowed to run in incognito mode.",
		"enum": [
			"spanning",
			"split",
			"not_allowed"
		],
		type: "string"
	},
	input_components: {
		description: "Allows your extension to handle keystrokes, set the composition, and manage the candidate window.",
		items: {
			additionalProperties: false,
			properties: {
				description: {
					type: "string"
				},
				id: {
					type: "string"
				},
				language: {
					type: "string"
				},
				layouts: {
					type: "array"
				},
				name: {
					type: "string"
				},
				type: {
					type: "string"
				}
			},
			required: [
				"name",
				"type",
				"id",
				"description",
				"language",
				"layouts"
			],
			type: "object"
		},
		type: "array"
	},
	key: {
		description: "This value can be used to control the unique ID of an extension, app, or theme when it is loaded during development.",
		type: "string"
	},
	manifest_version: {
		description: "One integer specifying the version of the manifest file format your package requires.",
		"enum": [
			2
		],
		maximum: 2,
		minimum: 2,
		type: "number"
	},
	minimum_chrome_version: {
		$ref: "#/definitions/version_string",
		description: "The version of Chrome that your extension, app, or theme requires, if any."
	},
	nacl_modules: {
		description: "One or more mappings from MIME types to the Native Client module that handles each type.",
		items: {
			additionalProperties: false,
			properties: {
				mime_type: {
					$ref: "#/definitions/mime_type",
					description: "The MIME type for which the Native Client module will be registered as content handler."
				},
				path: {
					$ref: "#/definitions/uri",
					description: "The location of a Native Client manifest (a .nmf file) within the extension directory."
				}
			},
			required: [
				"path",
				"mime_type"
			],
			type: "object"
		},
		minItems: 1,
		type: "array",
		uniqueItems: true
	},
	name: {
		description: "The name of the extension",
		maxLength: 45,
		type: "string"
	},
	oauth2: {
		additionalProperties: false,
		description: "Use the Chrome Identity API to authenticate users: the getAuthToken for users logged into their Google Account and the launchWebAuthFlow for users logged into a non-Google account.",
		properties: {
			client_id: {
				description: "You need to register your app in the Google APIs Console to get the client ID.",
				type: "string"
			},
			scopes: {
				items: {
					type: "string"
				},
				minItems: 1,
				type: "array"
			}
		},
		required: [
			"client_id",
			"scopes"
		],
		type: "object"
	},
	offline_enabled: {
		description: "Whether the app or extension is expected to work offline. When Chrome detects that it is offline, apps with this field set to true will be highlighted on the New Tab page.",
		type: "boolean"
	},
	omnibox: {
		additionalProperties: false,
		description: "The omnibox API allows you to register a keyword with Google Chrome's address bar, which is also known as the omnibox.",
		properties: {
			keyword: {
				description: "The keyward that will trigger your extension.",
				type: "string"
			}
		},
		required: [
			"keyword"
		],
		type: "object"
	},
	optional_permissions: {
		$ref: "#/definitions/permissions",
		description: "Use the chrome.permissions API to request declared optional permissions at run time rather than install time, so users understand why the permissions are needed and grant only those that are necessary."
	},
	options_page: {
		$ref: "#/definitions/page",
		"default": "options.html",
		description: "To allow users to customize the behavior of your extension, you may wish to provide an options page. If you do, a link to it will be provided from the extensions management page at chrome://extensions. Clicking the Options link opens a new tab pointing at your options page."
	},
	options_ui: {
		description: "To allow users to customize the behavior of your extension, you may wish to provide an options page. If you do, an Options link will be shown on the extensions management page at chrome://extensions which opens a dialogue containing your options page.",
		properties: {
			chrome_style: {
				"default": true,
				description: "If true, a Chrome user agent stylesheet will be applied to your options page. The default value is false, but we recommend you enable it for a consistent UI with Chrome.",
				type: "boolean"
			},
			open_in_tab: {
				"default": false,
				description: "If true, your extension's options page will be opened in a new tab rather than embedded in chrome://extensions. The default is false, and we recommend that you don't change it. This is only useful to delay the inevitable deprecation of the old options UI! It will be removed soon, so try not to use it. It will break.",
				type: "boolean"
			},
			page: {
				description: "The path to your options page, relative to your extension's root.",
				type: "string"
			}
		},
		required: [
			"page"
		],
		type: "object"
	},
	page_action: {
		$ref: "#/definitions/action",
		description: "Use the chrome.pageAction API to put icons inside the address bar. Page actions represent actions that can be taken on the current page, but that aren't applicable to all pages."
	},
	permissions: {
		$ref: "#/definitions/permissions",
		description: "Permissions help to limit damage if your extension or app is compromised by malware. Some permissions are also displayed to users before installation, as detailed in Permission Warnings."
	},
	platforms: {
	},
	requirements: {
		additionalProperties: false,
		description: "Technologies required by the app or extension. Hosting sites such as the Chrome Web Store may use this list to dissuade users from installing apps or extensions that will not work on their computer.",
		properties: {
			"3D": {
				additionalProperties: false,
				description: "The '3D' requirement denotes GPU hardware acceleration.",
				properties: {
					features: {
						description: "List of the 3D-related features your app requires.",
						items: {
							"enum": [
								"webgl"
							],
							type: "string"
						},
						minItems: 1,
						type: "array",
						uniqueItems: true
					}
				},
				required: [
					"features"
				],
				type: "object"
			},
			plugins: {
				additionalProperties: false,
				description: "Indicates if an app or extension requires NPAPI to run. This requirement is enabled by default when the manifest includes the 'plugins' field.",
				properties: {
					npapi: {
						"default": true,
						type: "boolean"
					}
				},
				required: [
					"npapi"
				],
				type: "object"
			}
		},
		type: "object"
	},
	sandbox: {
		additionalProperties: false,
		description: "Defines an collection of app or extension pages that are to be served in a sandboxed unique origin, and optionally a Content Security Policy to use with them.",
		properties: {
			content_security_policy: {
				$ref: "#/definitions/content_security_policy",
				"default": "sandbox allow-scripts allow-forms"
			},
			pages: {
				items: {
					$ref: "#/definitions/page"
				},
				minItems: 1,
				type: "array",
				uniqueItems: true
			}
		},
		required: [
			"pages"
		],
		type: "object"
	},
	short_name: {
		description: "The short name is typically used where there is insufficient space to display the full name.",
		maxLength: 12,
		type: "string"
	},
	signature: {
	},
	spellcheck: {
	},
	storage: {
	},
	system_indicator: {
	},
	tts_engine: {
		additionalProperties: false,
		description: "Register itself as a speech engine.",
		properties: {
			voices: {
				description: "Voices the extension can synthesize.",
				items: {
					additionalProperties: false,
					properties: {
						event_types: {
							description: "Events sent to update the client on the progress of speech synthesis.",
							items: {
								description: "",
								"enum": [
									"start",
									"word",
									"sentence",
									"marker",
									"end",
									"error"
								],
								type: "string"
							},
							minItems: 1,
							type: "array",
							uniqueItems: true
						},
						gender: {
							description: "If your voice corresponds to a male or female voice, you can use this parameter to help clients choose the most appropriate voice for their application.",
							type: "string"
						},
						lang: {
							description: "Almost always, a voice can synthesize speech in just a single language. When an engine supports more than one language, it can easily register a separate voice for each language.",
							type: "string"
						},
						voice_name: {
							description: "Identifies the name of the voice and the engine used.",
							type: "string"
						}
					},
					required: [
						"voice_name",
						"event_types"
					],
					type: "object"
				},
				minItems: 1,
				type: "array",
				uniqueItems: true
			}
		},
		required: [
			"voices"
		],
		type: "object"
	},
	update_url: {
		$ref: "#/definitions/uri",
		description: "If you publish using the Chrome Developer Dashboard, ignore this field. If you host your own extension or app: URL to an update manifest XML file."
	},
	version: {
		$ref: "#/definitions/version_string",
		description: "One to four dot-separated integers identifying the version of this extension."
	},
	version_name: {
		description: "In addition to the version field, which is used for update purposes, version_name can be set to a descriptive version string and will be used for display purposes if present.",
		type: "string"
	},
	web_accessible_resources: {
		description: "An array of strings specifying the paths (relative to the package root) of packaged resources that are expected to be usable in the context of a web page.",
		items: {
			$ref: "#/definitions/uri"
		},
		minItems: 1,
		type: "array",
		uniqueItems: true
	}
};
var title = "JSON schema for Google Chrome extension manifest files";
var type = "object";
var schemaMV2 = {
	$id: $id$1,
	$schema: $schema$1,
	additionalProperties: additionalProperties,
	definitions: definitions,
	dependencies: dependencies,
	properties: properties,
	title: title,
	type: type
};

var $id$2 = "https://extend-chrome.dev/schema/manifest-v3.schema.json";
var $schema$2 = "http://json-schema.org/draft-07/schema#";
var additionalProperties$1 = true;
var definitions$1 = {
	action: {
		dependencies: {
			icons: {
				not: {
					required: [
						"icons"
					]
				}
			},
			name: {
				not: {
					required: [
						"name"
					]
				}
			},
			popup: {
				not: {
					required: [
						"popup"
					]
				}
			}
		},
		properties: {
			default_icon: {
				description: "Icon for the main toolbar.",
				properties: {
					"16": {
						$ref: "#/definitions/icon",
						"default": "icon-16.png"
					},
					"24": {
						$ref: "#/definitions/icon",
						"default": "icon-24.png"
					},
					"32": {
						$ref: "#/definitions/icon",
						"default": "icon-32.png"
					}
				},
				type: "object"
			},
			default_popup: {
				$ref: "#/definitions/uri",
				description: "The popup appears when the user clicks the icon."
			},
			default_title: {
				description: "Tooltip for the main toolbar icon.",
				type: "string"
			}
		},
		type: "object"
	},
	command: {
		additionalProperties: false,
		properties: {
			description: {
				type: "string"
			},
			suggested_key: {
				additionalProperties: false,
				patternProperties: {
					"^(default|mac|windows|linux|chromeos)$": {
						pattern: "^(Ctrl|Command|MacCtrl|Alt|Option)\\+(Shift\\+)?[A-Z]",
						type: "string"
					}
				},
				type: "object"
			}
		},
		type: "object"
	},
	content_security_policy: {
		"default": "script-src 'self'; object-src 'self'",
		description: "This introduces some fairly strict policies that will make extensions more secure by default, and provides you with the ability to create and enforce rules governing the types of content that can be loaded and executed by your extensions and applications.",
		format: "content-security-policy",
		type: "string"
	},
	glob_pattern: {
		format: "glob-pattern",
		type: "string"
	},
	icon: {
		$ref: "#/definitions/uri",
		"default": "icon.png"
	},
	match_pattern: {
		format: "match-pattern",
		pattern: "^((\\*|http|https|file|ftp|chrome-extension):\\/\\/(\\*|(([^/*:]+:(\\d{1,5}|\\*)))|(\\*.[^\\/*:]+)|[^\\/*:]+)?(\\/.*))|<all_urls>$",
		type: "string"
	},
	mime_type: {
		format: "mime-type",
		pattern: "^(?:application|audio|image|message|model|multipart|text|video)\\/[-+.\\w]+$",
		type: "string"
	},
	page: {
		$ref: "#/definitions/uri"
	},
	permissions: {
		items: {
			"enum": [
				"activeTab",
				"alarms",
				"background",
				"bookmarks",
				"browsingData",
				"certificateProvider",
				"clipboardRead",
				"clipboardWrite",
				"contentSettings",
				"contextMenus",
				"cookies",
				"debugger",
				"declarativeContent",
				"declarativeNetRequest",
				"declarativeNetRequestFeedback",
				"declarativeWebRequest",
				"desktopCapture",
				"documentScan",
				"downloads",
				"enterprise.deviceAttributes",
				"enterprise.hardwarePlatform",
				"enterprise.networkingAttributes",
				"enterprise.platformKeys",
				"experimental",
				"fileBrowserHandler",
				"fileSystemProvider",
				"fontSettings",
				"gcm",
				"geolocation",
				"history",
				"identity",
				"identity.email",
				"idle",
				"loginState",
				"management",
				"nativeMessaging",
				"notifications",
				"pageCapture",
				"platformKeys",
				"power",
				"printerProvider",
				"printing",
				"printingMetrics",
				"privacy",
				"processes",
				"proxy",
				"scripting",
				"search",
				"sessions",
				"signedInDevices",
				"storage",
				"system.cpu",
				"system.display",
				"system.memory",
				"system.storage",
				"tabCapture",
				"tabGroups",
				"tabs",
				"topSites",
				"tts",
				"ttsEngine",
				"unlimitedStorage",
				"vpnProvider",
				"wallpaper",
				"webNavigation",
				"webRequest",
				"webRequestBlocking"
			],
			type: "string"
		},
		type: "array",
		uniqueItems: true
	},
	files: {
		items: {
			$ref: "#/definitions/uri"
		},
		minItems: 1,
		type: "array",
		uniqueItems: true
	},
	service_worker: {
		$ref: "#/definitions/uri"
	},
	uri: {
		type: "string"
	},
	version_string: {
		pattern: "^(?:\\d{1,5}\\.){0,3}\\d{1,5}$",
		type: "string"
	}
};
var dependencies$1 = {
	content_scripts: {
		not: {
			required: [
				"script_badge"
			]
		}
	},
	script_badge: {
		not: {
			required: [
				"content_scripts"
			]
		}
	}
};
var properties$1 = {
	action: {
		$ref: "#/definitions/action",
		description: "Use the extension action to put icons in the main Google Chrome toolbar, to the right of the address bar. In addition to its icon, an action can also have a tooltip, a badge, and a popup."
	},
	background: {
		description: "Extensions use the background service worker to listen for events.",
		properties: {
			service_worker: {
				$ref: "#/definitions/service_worker",
				"default": "service-worker.js",
				description: "Specify the service worker file. It must be located in the root folder of the extension next to the manifest."
			},
			type: {
				type: "string",
				"enum": [
					"module"
				]
			},
			persistent: {
				not: {
				}
			},
			scripts: {
				not: {
				}
			},
			page: {
				not: {
				}
			}
		},
		type: "object"
	},
	browser_action: {
		not: {
		}
	},
	chrome_settings_overrides: {
	},
	chrome_url_overrides: {
		additionalProperties: false,
		description: "Override pages are a way to substitute an HTML file from your extension for a page that Google Chrome normally provides.",
		maxProperties: 1,
		properties: {
			bookmarks: {
				$ref: "#/definitions/page",
				"default": "bookmarks.html",
				description: "The page that appears when the user chooses the Bookmark Manager menu item from the Chrome menu or, on Mac, the Bookmark Manager item from the Bookmarks menu. You can also get to this page by entering the URL chrome://bookmarks."
			},
			history: {
				$ref: "#/definitions/page",
				"default": "history.html",
				description: "The page that appears when the user chooses the History menu item from the Chrome menu or, on Mac, the Show Full History item from the History menu. You can also get to this page by entering the URL chrome://history."
			},
			newtab: {
				$ref: "#/definitions/page",
				"default": "newtab.html",
				description: "The page that appears when the user creates a new tab or window. You can also get to this page by entering the URL chrome://newtab."
			}
		},
		type: "object"
	},
	commands: {
		description: "Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the extension.",
		patternProperties: {
			".*": {
				$ref: "#/definitions/command"
			},
			"^_execute_browser_action$": {
				$ref: "#/definitions/command"
			},
			"^_execute_page_action$": {
				$ref: "#/definitions/command"
			}
		},
		type: "object"
	},
	content_pack: {
	},
	content_scripts: {
		description: "Content scripts are JavaScript files that run in the context of web pages.",
		items: {
			additionalProperties: false,
			properties: {
				all_frames: {
					"default": false,
					description: "Controls whether the content script runs in all frames of the matching page, or only the top frame.",
					type: "boolean"
				},
				css: {
					description: "The list of CSS files to be injected into matching pages. These are injected in the order they appear in this array, before any DOM is constructed or displayed for the page.",
					items: {
						$ref: "#/definitions/uri"
					},
					type: "array",
					uniqueItems: true
				},
				exclude_globs: {
					description: "Applied after matches to exclude URLs that match this glob. Intended to emulate the @exclude Greasemonkey keyword.",
					items: {
						$ref: "#/definitions/glob_pattern"
					},
					type: "array",
					uniqueItems: true
				},
				exclude_matches: {
					description: "Excludes pages that this content script would otherwise be injected into.",
					items: {
						$ref: "#/definitions/match_pattern"
					},
					type: "array",
					uniqueItems: true
				},
				include_globs: {
					description: "Applied after matches to include only those URLs that also match this glob. Intended to emulate the @include Greasemonkey keyword.",
					items: {
						$ref: "#/definitions/glob_pattern"
					},
					type: "array",
					uniqueItems: true
				},
				js: {
					$ref: "#/definitions/files",
					description: "The list of JavaScript files to be injected into matching pages. These are injected in the order they appear in this array."
				},
				match_about_blank: {
					"default": false,
					description: "Whether to insert the content script on about:blank and about:srcdoc.",
					type: "boolean"
				},
				matches: {
					description: "Specifies which pages this content script will be injected into.",
					items: {
						$ref: "#/definitions/match_pattern"
					},
					minItems: 1,
					type: "array",
					uniqueItems: true
				},
				run_at: {
					"default": "document_idle",
					description: "Controls when the files in js are injected.",
					"enum": [
						"document_start",
						"document_end",
						"document_idle"
					],
					type: "string"
				}
			},
			required: [
				"matches"
			],
			type: "object"
		},
		minItems: 1,
		type: "array",
		uniqueItems: true
	},
	content_security_policy: {
		properties: {
			extension_pages: {
				$ref: "#/definitions/content_security_policy"
			},
			sandbox: {
				$ref: "#/definitions/content_security_policy"
			}
		},
		type: "object"
	},
	current_locale: {
	},
	default_locale: {
		"default": "en",
		description: "Specifies the subdirectory of _locales that contains the default strings for this extension.",
		type: "string"
	},
	description: {
		description: "A plain text description of the extension",
		maxLength: 132,
		type: "string"
	},
	devtools_page: {
		$ref: "#/definitions/page",
		description: "A DevTools extension adds functionality to the Chrome DevTools. It can add new UI panels and sidebars, interact with the inspected page, get information about network requests, and more."
	},
	externally_connectable: {
		description: "Declares which extensions, apps, and web pages can connect to your extension via runtime.connect and runtime.sendMessage.",
		items: {
			additionalProperties: false,
			properties: {
				accepts_tls_channel_id: {
					"default": false,
					description: "Indicates that the extension would like to make use of the TLS channel ID of the web page connecting to it. The web page must also opt to send the TLS channel ID to the extension via setting includeTlsChannelId to true in runtime.connect's connectInfo or runtime.sendMessage's options.",
					type: "boolean"
				},
				ids: {
					items: {
						description: "The IDs of extensions or apps that are allowed to connect. If left empty or unspecified, no extensions or apps can connect.",
						type: "string"
					},
					type: "array"
				},
				matches: {
					items: {
						description: "The URL patterns for web pages that are allowed to connect. This does not affect content scripts. If left empty or unspecified, no web pages can connect.",
						type: "string"
					},
					type: "array"
				}
			},
			type: "object"
		},
		type: "object"
	},
	file_browser_handlers: {
		description: "You can use this API to enable users to upload files to your website.",
		items: {
			additionalProperties: false,
			properties: {
				default_title: {
					description: "What the button will display.",
					type: "string"
				},
				file_filters: {
					description: "Filetypes to match.",
					items: {
						type: "string"
					},
					minItems: 1,
					type: "array"
				},
				id: {
					description: "Used by event handling code to differentiate between multiple file handlers",
					type: "string"
				}
			},
			required: [
				"id",
				"default_title",
				"file_filters"
			],
			type: "object"
		},
		minItems: 1,
		type: "array"
	},
	host_permissions: {
		description: "Contains one or more match patterns that give access to one or more hosts.",
		items: {
			$ref: "#/definitions/match_pattern"
		},
		type: "array",
		uniqueItems: true
	},
	homepage_url: {
		$ref: "#/definitions/uri",
		description: "The URL of the homepage for this extension."
	},
	icons: {
		description: "One or more icons that represent the extension, app, or theme. Recommended format: PNG; also BMP, GIF, ICO, JPEG.",
		minProperties: 1,
		properties: {
			"16": {
				$ref: "#/definitions/icon",
				description: "Used as the favicon for an extension's pages and infobar."
			},
			"48": {
				$ref: "#/definitions/icon",
				description: "Used on the extension management page (chrome://extensions)."
			},
			"128": {
				$ref: "#/definitions/icon",
				description: "Used during installation and in the Chrome Web Store."
			},
			"256": {
				$ref: "#/definitions/icon",
				description: "Used during installation and in the Chrome Web Store."
			}
		},
		type: "object"
	},
	"import": {
	},
	incognito: {
		"default": "spanning",
		description: "Specify how this extension will behave if allowed to run in incognito mode.",
		"enum": [
			"spanning",
			"split",
			"not_allowed"
		],
		type: "string"
	},
	input_components: {
		description: "Allows your extension to handle keystrokes, set the composition, and manage the candidate window.",
		items: {
			additionalProperties: false,
			properties: {
				description: {
					type: "string"
				},
				id: {
					type: "string"
				},
				language: {
					type: "string"
				},
				layouts: {
					type: "array"
				},
				name: {
					type: "string"
				},
				type: {
					type: "string"
				}
			},
			required: [
				"name",
				"type",
				"id",
				"description",
				"language",
				"layouts"
			],
			type: "object"
		},
		type: "array"
	},
	key: {
		description: "This value can be used to control the unique ID of an extension, app, or theme when it is loaded during development.",
		type: "string"
	},
	manifest_version: {
		description: "One integer specifying the version of the manifest file format your package requires.",
		"enum": [
			3
		],
		type: "number"
	},
	minimum_chrome_version: {
		$ref: "#/definitions/version_string",
		description: "The version of Chrome that your extension, app, or theme requires, if any."
	},
	nacl_modules: {
		description: "One or more mappings from MIME types to the Native Client module that handles each type.",
		items: {
			additionalProperties: false,
			properties: {
				mime_type: {
					$ref: "#/definitions/mime_type",
					description: "The MIME type for which the Native Client module will be registered as content handler."
				},
				path: {
					$ref: "#/definitions/uri",
					description: "The location of a Native Client manifest (a .nmf file) within the extension directory."
				}
			},
			required: [
				"path",
				"mime_type"
			],
			type: "object"
		},
		minItems: 1,
		type: "array",
		uniqueItems: true
	},
	name: {
		description: "The name of the extension",
		maxLength: 45,
		type: "string"
	},
	oauth2: {
		additionalProperties: false,
		description: "Use the Chrome Identity API to authenticate users: the getAuthToken for users logged into their Google Account and the launchWebAuthFlow for users logged into a non-Google account.",
		properties: {
			client_id: {
				description: "You need to register your app in the Google APIs Console to get the client ID.",
				type: "string"
			},
			scopes: {
				items: {
					type: "string"
				},
				minItems: 1,
				type: "array"
			}
		},
		required: [
			"client_id",
			"scopes"
		],
		type: "object"
	},
	offline_enabled: {
		description: "Whether the app or extension is expected to work offline. When Chrome detects that it is offline, apps with this field set to true will be highlighted on the New Tab page.",
		type: "boolean"
	},
	omnibox: {
		additionalProperties: false,
		description: "The omnibox API allows you to register a keyword with Google Chrome's address bar, which is also known as the omnibox.",
		properties: {
			keyword: {
				description: "The keyward that will trigger your extension.",
				type: "string"
			}
		},
		required: [
			"keyword"
		],
		type: "object"
	},
	optional_permissions: {
		$ref: "#/definitions/permissions",
		description: "Use the chrome.permissions API to request declared optional permissions at run time rather than install time, so users understand why the permissions are needed and grant only those that are necessary."
	},
	options_page: {
		$ref: "#/definitions/page",
		"default": "options.html",
		description: "To allow users to customize the behavior of your extension, you may wish to provide an options page. If you do, a link to it will be provided from the extensions management page at chrome://extensions. Clicking the Options link opens a new tab pointing at your options page."
	},
	options_ui: {
		description: "To allow users to customize the behavior of your extension, you may wish to provide an options page. If you do, an Options link will be shown on the extensions management page at chrome://extensions which opens a dialogue containing your options page.",
		properties: {
			chrome_style: {
				"default": true,
				description: "If true, a Chrome user agent stylesheet will be applied to your options page. The default value is false, but we recommend you enable it for a consistent UI with Chrome.",
				type: "boolean"
			},
			open_in_tab: {
				"default": false,
				description: "If true, your extension's options page will be opened in a new tab rather than embedded in chrome://extensions. The default is false, and we recommend that you don't change it. This is only useful to delay the inevitable deprecation of the old options UI! It will be removed soon, so try not to use it. It will break.",
				type: "boolean"
			},
			page: {
				description: "The path to your options page, relative to your extension's root.",
				type: "string"
			}
		},
		required: [
			"page"
		],
		type: "object"
	},
	page_action: {
		not: {
		}
	},
	permissions: {
		$ref: "#/definitions/permissions",
		description: "Permissions help to limit damage if your extension or app is compromised by malware. Some permissions are also displayed to users before installation, as detailed in Permission Warnings."
	},
	platforms: {
	},
	requirements: {
		additionalProperties: false,
		description: "Technologies required by the app or extension. Hosting sites such as the Chrome Web Store may use this list to dissuade users from installing apps or extensions that will not work on their computer.",
		properties: {
			"3D": {
				additionalProperties: false,
				description: "The '3D' requirement denotes GPU hardware acceleration.",
				properties: {
					features: {
						description: "List of the 3D-related features your app requires.",
						items: {
							"enum": [
								"webgl"
							],
							type: "string"
						},
						minItems: 1,
						type: "array",
						uniqueItems: true
					}
				},
				required: [
					"features"
				],
				type: "object"
			},
			plugins: {
				additionalProperties: false,
				description: "Indicates if an app or extension requires NPAPI to run. This requirement is enabled by default when the manifest includes the 'plugins' field.",
				properties: {
					npapi: {
						"default": true,
						type: "boolean"
					}
				},
				required: [
					"npapi"
				],
				type: "object"
			}
		},
		type: "object"
	},
	sandbox: {
		additionalProperties: false,
		description: "Defines an collection of app or extension pages that are to be served in a sandboxed unique origin, and optionally a Content Security Policy to use with them.",
		properties: {
			content_security_policy: {
				$ref: "#/definitions/content_security_policy",
				"default": "sandbox allow-scripts allow-forms"
			},
			pages: {
				items: {
					$ref: "#/definitions/page"
				},
				minItems: 1,
				type: "array",
				uniqueItems: true
			}
		},
		required: [
			"pages"
		],
		type: "object"
	},
	short_name: {
		description: "The short name is typically used where there is insufficient space to display the full name.",
		maxLength: 12,
		type: "string"
	},
	signature: {
	},
	spellcheck: {
	},
	storage: {
	},
	system_indicator: {
	},
	tts_engine: {
		additionalProperties: false,
		description: "Register itself as a speech engine.",
		properties: {
			voices: {
				description: "Voices the extension can synthesize.",
				items: {
					additionalProperties: false,
					properties: {
						event_types: {
							description: "Events sent to update the client on the progress of speech synthesis.",
							items: {
								description: "",
								"enum": [
									"start",
									"word",
									"sentence",
									"marker",
									"end",
									"error"
								],
								type: "string"
							},
							minItems: 1,
							type: "array",
							uniqueItems: true
						},
						gender: {
							description: "If your voice corresponds to a male or female voice, you can use this parameter to help clients choose the most appropriate voice for their application.",
							type: "string"
						},
						lang: {
							description: "Almost always, a voice can synthesize speech in just a single language. When an engine supports more than one language, it can easily register a separate voice for each language.",
							type: "string"
						},
						voice_name: {
							description: "Identifies the name of the voice and the engine used.",
							type: "string"
						}
					},
					required: [
						"voice_name",
						"event_types"
					],
					type: "object"
				},
				minItems: 1,
				type: "array",
				uniqueItems: true
			}
		},
		required: [
			"voices"
		],
		type: "object"
	},
	update_url: {
		$ref: "#/definitions/uri",
		description: "If you publish using the Chrome Developer Dashboard, ignore this field. If you host your own extension or app: URL to an update manifest XML file."
	},
	version: {
		$ref: "#/definitions/version_string",
		description: "One to four dot-separated integers identifying the version of this extension."
	},
	version_name: {
		description: "In addition to the version field, which is used for update purposes, version_name can be set to a descriptive version string and will be used for display purposes if present.",
		type: "string"
	},
	web_accessible_resources: {
		description: "An array of objects that declare resource access rules. Each object maps an array of extension resources to an array of URLs and/or extension IDs that can access those resources.",
		items: {
			anyOf: [
				{
					required: [
						"matches"
					]
				},
				{
					required: [
						"extensions"
					]
				}
			],
			properties: {
				resources: {
					$ref: "#/definitions/files"
				},
				matches: {
					items: {
						$ref: "#/definitions/match_pattern"
					},
					minItems: 1,
					type: "array",
					uniqueItems: true
				},
				extensions: {
					items: {
						maxLength: 32,
						minLength: 32,
						pattern: "^[a-z]+$",
						type: "string"
					},
					type: "array"
				},
				use_dynamic_url: {
					"default": true,
					type: "boolean"
				}
			},
			required: [
				"resources"
			]
		},
		minItems: 1,
		type: "array",
		uniqueItems: true
	}
};
var title$1 = "JSON schema for Google Chrome extension manifest files";
var type$1 = "object";
var schemaMV3 = {
	$id: $id$2,
	$schema: $schema$2,
	additionalProperties: additionalProperties$1,
	definitions: definitions$1,
	dependencies: dependencies$1,
	properties: properties$1,
	title: title$1,
	type: type$1
};

function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
const ajv = new Ajv({
  schemas: [schema, schemaMV2, schemaMV3],
  strict: false,
  verbose: true,
});

ajv.addFormat('glob-pattern', true);
ajv.addFormat('match-pattern', true);
ajv.addFormat('content-security-policy', true);
ajv.addFormat('mime-type', true);
ajv.addFormat('permission', true);

const validator = ajv.compile(schema);

const setupPointer = (target) => (
  pointer,
) =>
  jsonPtr.JsonPointer.create(pointer).get(target); 

const getSchemaDataMV2 = setupPointer(schemaMV2);
const getSchemaDataMV3 = setupPointer(schemaMV3);

const ignoredErrors = [
  'must match "then" schema',
  'must match "else" schema',
];

function validateManifest

(manifest) {
  const valid = validator(manifest);
  if (valid === true) return manifest

  const getValue = setupPointer(manifest);
  const getDesc =
    manifest.manifest_version === 2
      ? getSchemaDataMV2
      : getSchemaDataMV3;

  throw new Error(
    [
      'There were problems with the extension manifest.',
      ...(_nullishCoalesce(_optionalChain([validator, 'access', _ => _.errors
, 'optionalAccess', _2 => _2.filter, 'call', _3 => _3(
          ({ message }) =>
            message && !ignoredErrors.includes(message),
        )
, 'access', _4 => _4.map, 'call', _5 => _5((e) => {
          const schemaPath = `/${e.schemaPath
            .split('/')
            .slice(1, -1)
            .concat('description')
            .join('/')}`;
          const desc = _nullishCoalesce(getDesc(schemaPath), () => ( e.message));

          if (e.instancePath.length === 0) {
            return `- Manifest ${desc}`
          }

          return `- ${JSON.stringify(
            getValue(e.instancePath),
          )} at "${e.instancePath}" ${desc}`
        })]), () => ( []))),
    ].join('\n'),
  )
}

const convertMatchPatterns = (m) => {
  // Use URL to parse match pattern
  // URL must have valid url scheme
  const [scheme, rest] = m.split('://');

  // URL must have valid port
  const [a, port, b] = rest.split(/(:\*)/);
  const isWildPort = port === ':*';
  const frag = isWildPort ? `${a}:3333${b}` : rest;

  // match patterns can only define origin
  const { origin } = new URL(`http://${frag}`);
  const [, base] = origin.split('://');

  // put port back
  const [x, y] = base.split(':3333');
  const final = isWildPort ? [x, port, y].join('') : base;

  // URL escapes asterixes
  // Need to unescape them
  return unescape(`${scheme}://${final}/*`)
};

function _nullishCoalesce$1(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
function getImportContentScriptFileName(target) {
  const base = path.basename(target);
  return target.replace(base, `import-${base}`)
}

function updateManifestV3(
  m,
  options,
  wrapContentScripts,
  cache,
) {
  const manifest = cloneObject(m);

  if (manifest.background) {
    manifest.background.type = 'module';
  }

  if (manifest.content_scripts) {
    const { output = {} } = options;
    const {
      chunkFileNames = 'chunks/[name]-[hash].js',
    } = Array.isArray(output) ? output[0] : output;

    cache.chunkFileNames = chunkFileNames;

    // Output could be an array
    if (Array.isArray(output)) {
      if (
        // Should only be one value for chunkFileNames
        output.reduce(
          (r, x) => r.add(_nullishCoalesce$1(x.chunkFileNames, () => ( 'no cfn'))),
          new Set(),
        ).size > 1
      )
        // We need to know chunkFileNames now, before the output stage
        throw new TypeError(
          'Multiple output values for chunkFileNames are not supported',
        )

      // If chunkFileNames is undefined, use our default
      output.forEach((x) => (x.chunkFileNames = chunkFileNames));
    } else {
      // If chunkFileNames is undefined, use our default
      output.chunkFileNames = chunkFileNames;
    }

    const allMatches = manifest.content_scripts
      .flatMap(({ matches }) => _nullishCoalesce$1(matches, () => ( [])))
      .concat(_nullishCoalesce$1(manifest.host_permissions, () => ( [])))
      .map(convertMatchPatterns);

    const matches = Array.from(new Set(allMatches));
    const resources = [
      `${chunkFileNames
        .split('/')
        .join('/')
        .replace('[format]', '*')
        .replace('[name]', '*')
        .replace('[hash]', '*')}`,
      ...cache.contentScripts.map((x) =>
        path.relative(cache.srcDir, x),
      ),
    ];
    
    if (wrapContentScripts) {
      manifest.content_scripts = manifest.content_scripts.map(
        (c) => ({
          ...c,
          js: _optionalChain$1([c, 'access', _ => _.js, 'optionalAccess', _2 => _2.map, 'call', _3 => _3(getImportContentScriptFileName)]),
        }),
      );
    }

    manifest.web_accessible_resources =
      _nullishCoalesce$1(manifest.web_accessible_resources, () => ( []));

    manifest.web_accessible_resources.push({
      resources,
      matches,
    });
  }

  return manifest
}

function _optionalChain$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }





function warnDeprecatedOptions(
  
  {
    browserPolyfill,
    crossBrowser,
    dynamicImportWrapper,
    firstClassManifest,
    iifeJsonPaths,
    publicKey,
    contentScriptWrapper,
  }








,
  cache,
) {
  /* ------------ WARN DEPRECATED OPTIONS ------------ */
  if (crossBrowser)
    this.warn('`options.crossBrowser` is not implemented yet');

  if (!firstClassManifest)
    this.warn(
      '`options.firstClassManifest` will be removed in version 5.0.0',
    );

  if (_optionalChain$2([iifeJsonPaths, 'optionalAccess', _ => _.length]))
    this.warn('`options.iifeJsonPaths` is deprecated');

  if (typeof contentScriptWrapper !== 'undefined')
    this.warn(
      '`options.contentScriptWrapper` is deprecated.\nPlease use `options.wrapContentScript`',
    );

  if (isMV2(cache.manifest))
    // MV2 manifest is handled in `generateBundle`
    return

  if (browserPolyfill)
    this.warn(
      [
        '`options.browserPolyfill` is deprecated for MV3 and does nothing internally',
        'See: https://extend-chrome.dev/rollup-plugin#mv3-faq',
      ].join('\n'),
    );

  if (
    // This should be an empty object
    typeof dynamicImportWrapper !== 'object' ||
    Object.keys(dynamicImportWrapper).length > 0
  )
    this.warn(
      '`options.dynamicImportWrapper` is not required for MV3',
    );

  if (publicKey)
    this.warn(
      [
        '`options.publicKey` is deprecated for MV3,',
        'please use `options.extendManifest` instead',
        'see: https://extend-chrome.dev/rollup-plugin#mv3-faq',
      ].join('\n'),
    );
}

function _nullishCoalesce$2(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain$3(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
const explorer = cosmiconfig.cosmiconfigSync('manifest', {
  cache: false,
  loaders: {
    '.ts': (filePath) => {
      require('esbuild-runner/register');
      const result = require(filePath);

      return _nullishCoalesce$2(result.default, () => ( result))
    },
  },
});

const name$1 = 'manifest-input';

// We use a stub if the manifest has no scripts
//   eg, a CSS only Chrome Extension
const stubChunkNameForCssOnlyCrx =
  'stub__css-only-chrome-extension-manifest';
const importWrapperChunkNamePrefix =
  '__RPCE-import-wrapper';

const npmPkgDetails =
  process.env.npm_package_name &&
  process.env.npm_package_version &&
  process.env.npm_package_description
    ? {
        name: process.env.npm_package_name,
        version: process.env.npm_package_version,
        description: process.env.npm_package_description,
      }
    : {
        name: '',
        version: '',
        description: '',
      };

/* ============================================ */
/*                MANIFEST-INPUT                */
/* ============================================ */

function manifestInput(
  {
    browserPolyfill = false,
    contentScriptWrapper = true,
    crossBrowser = false,
    dynamicImportWrapper = {},
    extendManifest = {},
    firstClassManifest = true,
    iifeJsonPaths = [],
    pkg = npmPkgDetails,
    publicKey,
    verbose = true,
    wrapContentScripts = true,
    cache = {
      assetChanged: false,
      assets: [],
      contentScripts: [],
      contentScriptCode: {},
      contentScriptIds: {},
      iife: [],
      input: [],
      inputAry: [],
      inputObj: {},
      permsHash: '',
      readFile: new Map(),
      srcDir: null,
    } ,
  } = {} ,
) {
  const readAssetAsBuffer = memoize(
    (filepath) => {
      return fs__default.readFile(filepath)
    },
    {
      cache: cache.readFile,
    },
  );

  /* ------------------ DEPRECATIONS ----------------- */

  // contentScriptWrapper = wrapContentScripts

  /* ----------- HOOKS CLOSURES START ----------- */

  let manifestPath;

  const manifestName = 'manifest.json';

  /* ------------ HOOKS CLOSURES END ------------ */

  /* - SETUP DYNAMIC IMPORT LOADER SCRIPT START - */

  let wrapperScript = '';
  if (dynamicImportWrapper !== false) {
    wrapperScript = prepImportWrapperScript(dynamicImportWrapper);
  }

  /* -- SETUP DYNAMIC IMPORT LOADER SCRIPT END -- */

  /* --------------- plugin object -------------- */
  return {
    name: name$1,

    browserPolyfill,
    crossBrowser,

    get srcDir() {
      return cache.srcDir
    },

    get formatMap() {
      return { iife: cache.iife }
    },

    /* ============================================ */
    /*                 OPTIONS HOOK                 */
    /* ============================================ */

    options(options) {
      /* ----------- LOAD AND PROCESS MANIFEST ----------- */

      // Do not reload manifest without changes
      if (!cache.manifest) {
        const {
          inputManifestPath,
          ...cacheValues
        } = getInputManifestPath(options);

        Object.assign(cache, cacheValues);

        const configResult = explorer.load(
          inputManifestPath,
        ); 





        if (configResult.isEmpty) {
          throw new Error(`${options.input} is an empty file.`)
        }

        const { options_page, options_ui } = configResult.config;
        if (isPresent(options_ui) && isPresent(options_page)) {
          throw new Error(
            'options_ui and options_page cannot both be defined in manifest.json.',
          )
        }

        manifestPath = configResult.filepath;
        cache.srcDir = path__default.dirname(manifestPath);

        let extendedManifest;
        if (typeof extendManifest === 'function') {
          extendedManifest = extendManifest(configResult.config);
        } else if (typeof extendManifest === 'object') {
          extendedManifest = {
            ...configResult.config,
            ...extendManifest,
          }; 
        } else {
          extendedManifest = configResult.config;
        }

        const fullManifest = {
          // MV2 is default
          manifest_version: 2,
          name: pkg.name,
          // version must be all digits with up to three dots
          version: [
            ...(_nullishCoalesce$2(_optionalChain$3([pkg, 'access', _ => _.version, 'optionalAccess', _2 => _2.matchAll, 'call', _3 => _3(/\d+/g)]), () => ( []))),
          ].join('.'),
          description: pkg.description,
          ...extendedManifest,
        }; 

        // If the manifest is the source of truth for inputs
        //   `false` means that all inputs must come from Rollup config
        if (firstClassManifest) {
          // Any scripts from here will be regenerated as IIFE's
          cache.iife = iifeJsonPaths
            .map((jsonPath) => {
              const result = jsonpathPlus.JSONPath({
                path: jsonPath,
                json: fullManifest,
              });

              return result
            })
            .flat(Infinity);

          // Derive entry paths from manifest
          const {
            js,
            html,
            css,
            img,
            others,
            contentScripts,
          } = deriveFiles(fullManifest, cache.srcDir, {
            contentScripts: true,
          });

          cache.contentScripts = contentScripts;

          // Cache derived inputs
          cache.input = [...cache.inputAry, ...js, ...html];

          cache.assets = [
            // Dedupe assets
            ...new Set([...css, ...img, ...others]),
          ];
        }

        let finalManifest;
        if (isMV3(fullManifest)) {
          finalManifest = updateManifestV3(
            fullManifest,
            options,
            wrapContentScripts,
            cache,
          );
        } else {
          finalManifest = fullManifest;
        }

        cache.manifest = validateManifest(finalManifest);
      }
      /* --------------- END LOAD MANIFEST --------------- */

      // Final `options.input` is an object
      //   this grants full compatibility with all Rollup options
      const finalInput = cache.input.reduce(
        reduceToRecord(cache.srcDir),
        cache.inputObj,
      );

      // Use a stub if no js scripts
      if (Object.keys(finalInput).length === 0) {
        finalInput[
          stubChunkNameForCssOnlyCrx
        ] = stubChunkNameForCssOnlyCrx;
      }

      return { ...options, input: finalInput }
    },

    async buildStart() {
      /* ------------ WATCH ASSETS FOR CHANGES ----------- */

      this.addWatchFile(manifestPath);

      cache.assets.forEach((srcPath) => {
        this.addWatchFile(srcPath);
      });

      /* ------------------ EMIT ASSETS ------------------ */

      const assets = await Promise.all(
        cache.assets.map(async (srcPath) => {
          const source = await readAssetAsBuffer(srcPath);

          return {
            type: 'asset' ,
            source,
            fileName: path__default.relative(cache.srcDir, srcPath),
          }
        }),
      );

      assets.forEach((asset) => {
        this.emitFile(asset);
      });

      warnDeprecatedOptions.call(
        this,
        {
          browserPolyfill,
          crossBrowser,
          dynamicImportWrapper,
          firstClassManifest,
          iifeJsonPaths,
          publicKey,
        },
        cache,
      );

      // MV2 manifest is handled in `generateBundle`
      if (isMV2(cache.manifest)) return

      /* ---------- EMIT CONTENT SCRIPT WRAPPERS --------- */

      /* --------------- EMIT MV3 MANIFEST --------------- */

      const manifestBody = cloneObject(cache.manifest);
      const manifestJson = JSON.stringify(
        manifestBody,
        undefined,
        2,
      ).replace(/\.[jt]sx?"/g, '.js"');

      // Emit manifest.json
      this.emitFile({
        type: 'asset',
        fileName: manifestName,
        source: manifestJson,
      });
    },

    async resolveId(source) {
      return source === stubChunkNameForCssOnlyCrx ||
        source.startsWith(importWrapperChunkNamePrefix)
        ? source
        : null
    },

    load(id) {
      if (id === stubChunkNameForCssOnlyCrx) {
        return {
          code: `console.log(${stubChunkNameForCssOnlyCrx})`,
        }
      } else if (
        wrapContentScripts &&
        isMV3(cache.manifest) &&
        id.startsWith(importWrapperChunkNamePrefix)
      ) {
        const [, target] = id.split(':');
        const code$1 = code.replace(
          '%PATH%',
          JSON.stringify(target),
        );
        return { code: code$1 }
      }

      return null
    },

    transform(code, id) {
      if (
        wrapContentScripts &&
        isMV3(cache.manifest) &&
        cache.contentScripts.includes(id)
      ) {
        // Use slash to guarantee support Windows
        const target = `${slash(path.relative(cache.srcDir, id))
          .split('.')
          .slice(0, -1)
          .join('.')}.js`;

        const fileName = getImportContentScriptFileName(target);

        // Emit content script wrapper
        this.emitFile({
          id: `${importWrapperChunkNamePrefix}:${target}`,
          type: 'chunk',
          fileName,
        });
      }

      // No source transformation took place
      return { code, map: null }
    },

    watchChange(id) {
      if (id.endsWith(manifestName)) {
        // Dump cache.manifest if manifest changes
        delete cache.manifest;
        cache.assetChanged = false;
      } else {
        // Force new read of changed asset
        cache.assetChanged = cache.readFile.delete(id);
      }
    },

    /* ============================================ */
    /*                GENERATEBUNDLE                */
    /* ============================================ */

    generateBundle(options, bundle) {
      /* ----------------- CLEAN UP STUB ----------------- */

      delete bundle[stubChunkNameForCssOnlyCrx + '.js'];

      // We don't support completely empty bundles
      if (Object.keys(bundle).length === 0) {
        throw new Error(
          'The Chrome extension must have at least one asset (html or css) or script file.',
        )
      }

      // MV3 is handled in `buildStart` to support Vite
      if (isMV3(cache.manifest)) return

      /* ------------------------------------------------- */
      /*                 EMIT MV2 MANIFEST                 */
      /* ------------------------------------------------- */

      /* ------------ DERIVE PERMISSIONS START ----------- */

      let permissions = [];
      // Get module ids for all chunks
      if (cache.assetChanged && cache.permsHash) {
        // Permissions did not change
        permissions = JSON.parse(cache.permsHash); 

        cache.assetChanged = false;
      } else {
        const chunks = Object.values(bundle).filter(isChunk);

        // Permissions may have changed
        permissions = Array.from(
          chunks.reduce(derivePermissions, new Set()),
        );

        const permsHash = JSON.stringify(permissions);

        if (verbose && permissions.length) {
          if (!cache.permsHash) {
            this.warn(
              `Detected permissions: ${permissions.toString()}`,
            );
          } else if (permsHash !== cache.permsHash) {
            this.warn(
              `Detected new permissions: ${permissions.toString()}`,
            );
          }
        }

        cache.permsHash = permsHash;
      }

      const clonedManifest = cloneObject(
        cache.manifest,
      ); 

      const manifestBody = {
        ...clonedManifest,
        permissions: combinePerms(
          permissions,
          clonedManifest.permissions || [],
        ),
      };

      const {
        background: { scripts: bgs = [] } = {},
        content_scripts: cts = [],
        web_accessible_resources: war = [],
      } = manifestBody;

      /* ------------ SETUP BACKGROUND SCRIPTS ----------- */

      // Emit background script wrappers
      if (bgs.length && wrapperScript.length) {
        // background exists because bgs has scripts
        manifestBody.background.scripts = bgs
          .map(normalizeFilename)
          .map((scriptPath) => {
            // Loader script exists because of type guard above
            const source =
              // Path to module being loaded
              wrapperScript.replace(
                '%PATH%',
                // Fix path slashes to support Windows
                JSON.stringify(
                  slash(path.relative('assets', scriptPath)),
                ),
              );

            const assetId = this.emitFile({
              type: 'asset',
              source,
              name: path.basename(scriptPath),
            });

            return this.getFileName(assetId)
          })
          .map((p) => slash(p));
      }

      /* ---------- END SETUP BACKGROUND SCRIPTS --------- */

      /* ------------- SETUP CONTENT SCRIPTS ------------- */

      const contentScripts = cts.reduce(
        (r, { js = [] }) => [...r, ...js],
        [] ,
      );

      if (contentScriptWrapper && contentScripts.length) {
        const memoizedEmitter = memoize((scriptPath) => {
          const source = code.replace(
            '%PATH%',
            // Fix path slashes to support Windows
            JSON.stringify(
              slash(path.relative('assets', scriptPath)),
            ),
          );

          const assetId = this.emitFile({
            type: 'asset',
            source,
            name: path.basename(scriptPath),
          });

          return this.getFileName(assetId)
        });

        // Setup content script import wrapper
        manifestBody.content_scripts = cts.map(
          ({ js, ...rest }) => {
            return typeof js === 'undefined'
              ? rest
              : {
                  js: js
                    .map(normalizeFilename)
                    .map(memoizedEmitter)
                    .map((p) => slash(p)),
                  ...rest,
                }
          },
        );

        // make all imports & dynamic imports web_acc_res
        const imports = Object.values(bundle)
          .filter((x) => x.type === 'chunk')
          .reduce(
            (r, { isEntry, fileName }) =>
              // Get imported filenames
              !isEntry ? [...r, fileName] : r,
            [] ,
          );

        manifestBody.web_accessible_resources = Array.from(
          new Set([
            ...war,
            // FEATURE: filter out imports for background?
            ...imports,
            // Need to be web accessible b/c of import
            ...contentScripts,
          ]),
        ).map((p) => slash(p));

        /* ----------- END SETUP CONTENT SCRIPTS ----------- */
      }

      /* --------- STABLE EXTENSION ID BEGIN -------- */

      if (publicKey) {
        manifestBody.key = publicKey;
      }

      /* ---------- STABLE EXTENSION ID END --------- */

      /* ----------- OUTPUT MANIFEST.JSON BEGIN ---------- */

      const manifestJson = JSON.stringify(
        manifestBody,
        null,
        2,
      ).replace(/\.[jt]sx?"/g, '.js"');

      // Emit manifest.json
      this.emitFile({
        type: 'asset',
        fileName: manifestName,
        source: manifestJson,
      });

      /* ------------ OUTPUT MANIFEST.JSON END ----------- */
    },
  }
}

const code$3 = "(function () {\n  'use strict';\n\n  const checkPolyfilled = 'typeof browser !== \"undefined\"';\n\n  const _executeScript = chrome.tabs.executeScript;\n  const withP = (...args) =>\n    new Promise((resolve, reject) => {\n      _executeScript(...args, (results) => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError.message);\n        } else {\n          resolve(results);\n        }\n      });\n    });\n\n  // @ts-expect-error FIXME: executeScript should return Promise<any[]>\n  chrome.tabs.executeScript = (...args) => {\n  (async () => {\n      const baseArgs = (typeof args[0] === 'number' ? [args[0]] : []); \n\n      const [done] = await withP(...(baseArgs.concat({ code: checkPolyfilled }) ));\n\n      if (!done) {\n        await withP(...(baseArgs.concat([{ file: JSON.parse('%BROWSER_POLYFILL_PATH%') }]) ));\n      }\n\n      _executeScript(...(args ));\n    })();\n  };\n\n}());\n";

function _optionalChain$4(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }




const defaultOptions = { executeScript: true };
function browserPolyfill({
  browserPolyfill: options = defaultOptions,
})


 {
  if (options === false)
    return {
      name: 'no-op',
      generateBundle() {},
    }
  else if (options === true) options = defaultOptions;
  const { executeScript = true } = options;

  const convert = require('convert-source-map');
  const polyfillPath = require.resolve('webextension-polyfill');
  const src = fs__default.readFileSync(polyfillPath, 'utf-8');
  const map = fs__default.readJsonSync(polyfillPath + '.map');

  const browserPolyfillSrc = [
    convert.removeMapFileComments(src),
    convert.fromObject(map).toComment(),
  ].join('\n');

  return {
    name: 'browser-polyfill',
    generateBundle({ plugins = [] }, bundle) {
      const firefoxPlugin = plugins.find(
        ({ name }) => name === 'firefox-addon',
      );
      const chromeExtensionPlugin = plugins.find(
        ({ name }) => name === 'chrome-extension',
      ); 

      if (
        firefoxPlugin &&
        !chromeExtensionPlugin._plugins.manifest.crossBrowser
      ) {
        return // Don't need to add it
      }

      const manifestAsset = bundle['manifest.json'];
      if (!isAsset(manifestAsset)) {
        throw new TypeError(
          `manifest.json must be an OutputAsset, received "${typeof manifestAsset}"`,
        )
      }
      const manifest = JSON.parse(
        manifestAsset.source ,
      ); 

      /* ------------- EMIT BROWSER POLYFILL ------------- */

      // Browser polyfill is not supported for MV3, there are better ways to do this:
      //   `import browser from "webextension-polyfill";`
      //   See: https://github.com/Lusito/webextension-polyfill-ts#migration-guide-from-webextension-polyfill-ts
      if (isMV3(manifest)) return

      const bpId = this.emitFile({
        type: 'asset',
        source: browserPolyfillSrc,
        fileName: 'assets/browser-polyfill.js',
      });

      const browserPolyfillPath = this.getFileName(bpId);

      if (executeScript) {
        const exId = this.emitFile({
          type: 'asset',
          source: code$3.replace(
            '%BROWSER_POLYFILL_PATH%',
            JSON.stringify(browserPolyfillPath),
          ),
          fileName: 'assets/browser-polyfill-executeScript.js',
        });

        const executeScriptPolyfillPath = this.getFileName(exId);

        // TODO: support this in MV3
        _optionalChain$4([manifest, 'access', _ => _.background, 'optionalAccess', _2 => _2.scripts, 'optionalAccess', _3 => _3.unshift, 'call', _4 => _4(
          executeScriptPolyfillPath,
        )]);
      }

      // TODO: support this in MV3
      _optionalChain$4([manifest, 'access', _5 => _5.background, 'optionalAccess', _6 => _6.scripts, 'optionalAccess', _7 => _7.unshift, 'call', _8 => _8(browserPolyfillPath)]);
      _optionalChain$4([manifest, 'access', _9 => _9.content_scripts, 'optionalAccess', _10 => _10.forEach, 'call', _11 => _11((script) => {
        _optionalChain$4([script, 'access', _12 => _12.js, 'optionalAccess', _13 => _13.unshift, 'call', _14 => _14(browserPolyfillPath)]);
      })]);

      /* ---------------- UPDATE MANIFEST ---------------- */
      manifestAsset.source = JSON.stringify(manifest);
    },
  }
}

const validateNames = () => ({
  name: 'validate-names',

  generateBundle(options, bundle) {
    const chunks = Object.values(bundle).filter(
      (x) => x.type === 'chunk',
    );

    // Files cannot start with "_" in Chrome Extensions, but folders CAN start with "_"
    // Rollup may output a helper file that starts with "_commonjsHelpers"
    // Loop through each file and check for "_commonjsHelpers" in filename
    Object.keys(bundle)
      .filter((fileName) =>
        path.basename(fileName).startsWith('_commonjsHelpers'),
      )
      .forEach((fileName) => {
        // Only replace first instance
        const regex = new RegExp(fileName);
        const [base, ...rest] = fileName.split('/').reverse();
        const fixed = [base.slice(1), ...rest]
          .reverse()
          .join('/');

        // Fix manifest
        const manifest = bundle['manifest.json']; 
        manifest.source = manifest.source.replace(regex, fixed);

        // Change bundle key
        const chunk = bundle[fileName];
        delete bundle[fileName];
        bundle[fixed] = chunk;

        // Fix chunk
        chunk.fileName = fixed;

        // Find imports and fix
        chunks
          .filter(({ imports }) => imports.includes(fileName))
          .forEach((chunk) => {
            // Fix imports list
            chunk.imports = chunk.imports.map((i) =>
              i === fileName ? fixed : i,
            );
            // Fix imports in code
            chunk.code = chunk.code.replace(regex, fixed);
          });
      });
  },
});

const resolveFromBundle = (
  bundle,
) => ({
  name: 'resolve-from-bundle',
  resolveId(source, importer) {
    if (typeof importer === 'undefined') {
      return source
    } else {
      const dirname = path__default.dirname(importer);
      const resolved = path__default.join(dirname, source);

      // if it's not in the bundle,
      //   tell Rollup not to try to resolve it
      return resolved in bundle ? resolved : false
    }
  },
  load(id) {
    const chunk = bundle[id];

    if (isChunk(chunk)) {
      return {
        code: chunk.code,
        map: chunk.map,
      }
    } else {
      // anything not in the bundle is external
      //  this doesn't make sense for a chrome extension,
      //    but we should let Rollup handle it
      return null
    }
  },
});

async function regenerateBundle(
  
  { input, output },
  bundle,
) {
  if (!output || Array.isArray(output)) {
    throw new TypeError(
      'options.output must be an OutputOptions object',
    )
  }

  if (typeof input === 'undefined') {
    throw new TypeError(
      'options.input should be an object, string array or string',
    )
  }

  // Don't do anything if input is an empty array
  if (Array.isArray(input) && input.length === 0) {
    return {}
  }

  const { format, chunkFileNames: cfn = '', sourcemap } = output;
  
  const chunkFileNames = path__default.join(path__default.dirname(cfn), '[name].js');

  // Transform input array to input object
  const inputValue = Array.isArray(input)
    ? input.reduce((r, x) => {
        const { dir, name } = path__default.parse(x);
        return { ...r, [path__default.join(dir, name)]: x }
      }, {} )
    : input;

  const build = await rollup.rollup({
    input: inputValue,
    plugins: [resolveFromBundle(bundle)],
  });

  let _b;
  await build.generate({
    format,
    sourcemap,
    chunkFileNames,
    plugins: [
      {
        name: 'get-bundle',
        generateBundle(o, b) {
          _b = b;
        },
      } ,
    ],
  });
  const newBundle = _b;

  if (typeof inputValue === 'string') {
    delete bundle[inputValue];

    const bundleKey = path__default.basename(inputValue);

    return {
      [inputValue]: {
        ...(newBundle[bundleKey] ),
        fileName: inputValue,
      },
    }
  } else {
    // Remove regenerated entries from bundle
    Object.values(inputValue).forEach((key) => {
      delete bundle[key];
    });

    return newBundle
  }
}

function mixedFormat(
  options,
) {
  return {
    name: 'mixed-format',
    async generateBundle(
      
      { format, chunkFileNames, sourcemap },
      bundle,
    ) {
      const { formatMap } = options; // this might not be defined upon init

      if (typeof formatMap === 'undefined') return

      const formats = Object.entries(formatMap).filter(
        (
          x,
        


) => typeof x[1] !== 'undefined',
      );

      {
        const allInput = formats.flatMap(([, inputs]) =>
          Array.isArray(inputs)
            ? inputs
            : Object.values(inputs || {}),
        );
        const allInputSet = new Set(allInput);
        if (allInput.length !== allInputSet.size) {
          throw new Error(
            'formats should not have duplicate inputs',
          )
        }
      }

      // TODO: handle different kinds of formats differently?
      const bundles = await Promise.all(
        // Configured formats
        formats.flatMap(([f, inputs]) =>
          (Array.isArray(inputs)
            ? inputs
            : Object.values(inputs)
          ).map((input) =>
            regenerateBundle.call(
              this,
              {
                input,
                output: {
                  format: f,
                  chunkFileNames,
                  sourcemap,
                },
              },
              bundle,
            ),
          ),
        ),
      );

      // Base format (ESM)
      const base = await regenerateBundle.call(
        this,
        {
          input: Object.entries(bundle)
            .filter(([, file]) => isChunk(file) && file.isEntry)
            .map(([key]) => key),
          output: { format, chunkFileNames, sourcemap },
        },
        bundle,
      );

      // Empty bundle
      Object.entries(bundle)
        .filter(([, v]) => isChunk(v))
        .forEach(([key]) => {
          delete bundle[key];
        });

      // Refill bundle
      Object.assign(bundle, base, ...bundles);
    },
  }
}

const code$4 = "(function () {\n  'use strict';\n\n  /* ------------------- FILENAMES ------------------- */\n\n  /* ------------------ PLACEHOLDERS ----------------- */\n\n  const timestampPathPlaceholder = '%TIMESTAMP_PATH%';\n  const loadMessagePlaceholder = '%LOAD_MESSAGE%';\n  const ctScriptPathPlaceholder = '%CONTENT_SCRIPT_PATH%';\n  const unregisterServiceWorkersPlaceholder = '%UNREGISTER_SERVICE_WORKERS%';\n  const executeScriptPlaceholder = '%EXECUTE_SCRIPT%';\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function commonjsRequire () {\n  \tthrow new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');\n  }\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var localforage = createCommonjsModule(function (module, exports) {\n  /*!\n      localForage -- Offline Storage, Improved\n      Version 1.9.0\n      https://localforage.github.io/localForage\n      (c) 2013-2017 Mozilla, Apache License 2.0\n  */\n  (function(f){{module.exports=f();}})(function(){return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof commonjsRequire==\"function\"&&commonjsRequire;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r);}return n[o].exports}var i=typeof commonjsRequire==\"function\"&&commonjsRequire;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n  (function (global){\n  var Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\n  var scheduleDrain;\n\n  {\n    if (Mutation) {\n      var called = 0;\n      var observer = new Mutation(nextTick);\n      var element = global.document.createTextNode('');\n      observer.observe(element, {\n        characterData: true\n      });\n      scheduleDrain = function () {\n        element.data = (called = ++called % 2);\n      };\n    } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n      var channel = new global.MessageChannel();\n      channel.port1.onmessage = nextTick;\n      scheduleDrain = function () {\n        channel.port2.postMessage(0);\n      };\n    } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n      scheduleDrain = function () {\n\n        // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n        // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n        var scriptEl = global.document.createElement('script');\n        scriptEl.onreadystatechange = function () {\n          nextTick();\n\n          scriptEl.onreadystatechange = null;\n          scriptEl.parentNode.removeChild(scriptEl);\n          scriptEl = null;\n        };\n        global.document.documentElement.appendChild(scriptEl);\n      };\n    } else {\n      scheduleDrain = function () {\n        setTimeout(nextTick, 0);\n      };\n    }\n  }\n\n  var draining;\n  var queue = [];\n  //named nextTick for less confusing stack traces\n  function nextTick() {\n    draining = true;\n    var i, oldQueue;\n    var len = queue.length;\n    while (len) {\n      oldQueue = queue;\n      queue = [];\n      i = -1;\n      while (++i < len) {\n        oldQueue[i]();\n      }\n      len = queue.length;\n    }\n    draining = false;\n  }\n\n  module.exports = immediate;\n  function immediate(task) {\n    if (queue.push(task) === 1 && !draining) {\n      scheduleDrain();\n    }\n  }\n\n  }).call(this,typeof commonjsGlobal !== \"undefined\" ? commonjsGlobal : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n  },{}],2:[function(_dereq_,module,exports){\n  var immediate = _dereq_(1);\n\n  /* istanbul ignore next */\n  function INTERNAL() {}\n\n  var handlers = {};\n\n  var REJECTED = ['REJECTED'];\n  var FULFILLED = ['FULFILLED'];\n  var PENDING = ['PENDING'];\n\n  module.exports = Promise;\n\n  function Promise(resolver) {\n    if (typeof resolver !== 'function') {\n      throw new TypeError('resolver must be a function');\n    }\n    this.state = PENDING;\n    this.queue = [];\n    this.outcome = void 0;\n    if (resolver !== INTERNAL) {\n      safelyResolveThenable(this, resolver);\n    }\n  }\n\n  Promise.prototype[\"catch\"] = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n  Promise.prototype.then = function (onFulfilled, onRejected) {\n    if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n      typeof onRejected !== 'function' && this.state === REJECTED) {\n      return this;\n    }\n    var promise = new this.constructor(INTERNAL);\n    if (this.state !== PENDING) {\n      var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n      unwrap(promise, resolver, this.outcome);\n    } else {\n      this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n    }\n\n    return promise;\n  };\n  function QueueItem(promise, onFulfilled, onRejected) {\n    this.promise = promise;\n    if (typeof onFulfilled === 'function') {\n      this.onFulfilled = onFulfilled;\n      this.callFulfilled = this.otherCallFulfilled;\n    }\n    if (typeof onRejected === 'function') {\n      this.onRejected = onRejected;\n      this.callRejected = this.otherCallRejected;\n    }\n  }\n  QueueItem.prototype.callFulfilled = function (value) {\n    handlers.resolve(this.promise, value);\n  };\n  QueueItem.prototype.otherCallFulfilled = function (value) {\n    unwrap(this.promise, this.onFulfilled, value);\n  };\n  QueueItem.prototype.callRejected = function (value) {\n    handlers.reject(this.promise, value);\n  };\n  QueueItem.prototype.otherCallRejected = function (value) {\n    unwrap(this.promise, this.onRejected, value);\n  };\n\n  function unwrap(promise, func, value) {\n    immediate(function () {\n      var returnValue;\n      try {\n        returnValue = func(value);\n      } catch (e) {\n        return handlers.reject(promise, e);\n      }\n      if (returnValue === promise) {\n        handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n      } else {\n        handlers.resolve(promise, returnValue);\n      }\n    });\n  }\n\n  handlers.resolve = function (self, value) {\n    var result = tryCatch(getThen, value);\n    if (result.status === 'error') {\n      return handlers.reject(self, result.value);\n    }\n    var thenable = result.value;\n\n    if (thenable) {\n      safelyResolveThenable(self, thenable);\n    } else {\n      self.state = FULFILLED;\n      self.outcome = value;\n      var i = -1;\n      var len = self.queue.length;\n      while (++i < len) {\n        self.queue[i].callFulfilled(value);\n      }\n    }\n    return self;\n  };\n  handlers.reject = function (self, error) {\n    self.state = REJECTED;\n    self.outcome = error;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callRejected(error);\n    }\n    return self;\n  };\n\n  function getThen(obj) {\n    // Make sure we only access the accessor once as required by the spec\n    var then = obj && obj.then;\n    if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n      return function appyThen() {\n        then.apply(obj, arguments);\n      };\n    }\n  }\n\n  function safelyResolveThenable(self, thenable) {\n    // Either fulfill, reject or reject with error\n    var called = false;\n    function onError(value) {\n      if (called) {\n        return;\n      }\n      called = true;\n      handlers.reject(self, value);\n    }\n\n    function onSuccess(value) {\n      if (called) {\n        return;\n      }\n      called = true;\n      handlers.resolve(self, value);\n    }\n\n    function tryToUnwrap() {\n      thenable(onSuccess, onError);\n    }\n\n    var result = tryCatch(tryToUnwrap);\n    if (result.status === 'error') {\n      onError(result.value);\n    }\n  }\n\n  function tryCatch(func, value) {\n    var out = {};\n    try {\n      out.value = func(value);\n      out.status = 'success';\n    } catch (e) {\n      out.status = 'error';\n      out.value = e;\n    }\n    return out;\n  }\n\n  Promise.resolve = resolve;\n  function resolve(value) {\n    if (value instanceof this) {\n      return value;\n    }\n    return handlers.resolve(new this(INTERNAL), value);\n  }\n\n  Promise.reject = reject;\n  function reject(reason) {\n    var promise = new this(INTERNAL);\n    return handlers.reject(promise, reason);\n  }\n\n  Promise.all = all;\n  function all(iterable) {\n    var self = this;\n    if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n      return this.reject(new TypeError('must be an array'));\n    }\n\n    var len = iterable.length;\n    var called = false;\n    if (!len) {\n      return this.resolve([]);\n    }\n\n    var values = new Array(len);\n    var resolved = 0;\n    var i = -1;\n    var promise = new this(INTERNAL);\n\n    while (++i < len) {\n      allResolver(iterable[i], i);\n    }\n    return promise;\n    function allResolver(value, i) {\n      self.resolve(value).then(resolveFromAll, function (error) {\n        if (!called) {\n          called = true;\n          handlers.reject(promise, error);\n        }\n      });\n      function resolveFromAll(outValue) {\n        values[i] = outValue;\n        if (++resolved === len && !called) {\n          called = true;\n          handlers.resolve(promise, values);\n        }\n      }\n    }\n  }\n\n  Promise.race = race;\n  function race(iterable) {\n    var self = this;\n    if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n      return this.reject(new TypeError('must be an array'));\n    }\n\n    var len = iterable.length;\n    var called = false;\n    if (!len) {\n      return this.resolve([]);\n    }\n\n    var i = -1;\n    var promise = new this(INTERNAL);\n\n    while (++i < len) {\n      resolver(iterable[i]);\n    }\n    return promise;\n    function resolver(value) {\n      self.resolve(value).then(function (response) {\n        if (!called) {\n          called = true;\n          handlers.resolve(promise, response);\n        }\n      }, function (error) {\n        if (!called) {\n          called = true;\n          handlers.reject(promise, error);\n        }\n      });\n    }\n  }\n\n  },{\"1\":1}],3:[function(_dereq_,module,exports){\n  (function (global){\n  if (typeof global.Promise !== 'function') {\n    global.Promise = _dereq_(2);\n  }\n\n  }).call(this,typeof commonjsGlobal !== \"undefined\" ? commonjsGlobal : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n  },{\"2\":2}],4:[function(_dereq_,module,exports){\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function getIDB() {\n      /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n      try {\n          if (typeof indexedDB !== 'undefined') {\n              return indexedDB;\n          }\n          if (typeof webkitIndexedDB !== 'undefined') {\n              return webkitIndexedDB;\n          }\n          if (typeof mozIndexedDB !== 'undefined') {\n              return mozIndexedDB;\n          }\n          if (typeof OIndexedDB !== 'undefined') {\n              return OIndexedDB;\n          }\n          if (typeof msIndexedDB !== 'undefined') {\n              return msIndexedDB;\n          }\n      } catch (e) {\n          return;\n      }\n  }\n\n  var idb = getIDB();\n\n  function isIndexedDBValid() {\n      try {\n          // Initialize IndexedDB; fall back to vendor-prefixed versions\n          // if needed.\n          if (!idb || !idb.open) {\n              return false;\n          }\n          // We mimic PouchDB here;\n          //\n          // We test for openDatabase because IE Mobile identifies itself\n          // as Safari. Oh the lulz...\n          var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n          var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n          // Safari <10.1 does not meet our requirements for IDB support\n          // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n          // Safari 10.1 shipped with fetch, we can use that to detect it.\n          // Note: this creates issues with `window.fetch` polyfills and\n          // overrides; see:\n          // https://github.com/localForage/localForage/issues/856\n          return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n          // some outdated implementations of IDB that appear on Samsung\n          // and HTC Android devices <4.4 are missing IDBKeyRange\n          // See: https://github.com/mozilla/localForage/issues/128\n          // See: https://github.com/mozilla/localForage/issues/272\n          typeof IDBKeyRange !== 'undefined';\n      } catch (e) {\n          return false;\n      }\n  }\n\n  // Abstracts constructing a Blob object, so it also works in older\n  // browsers that don't support the native Blob constructor. (i.e.\n  // old QtWebKit versions, at least).\n  // Abstracts constructing a Blob object, so it also works in older\n  // browsers that don't support the native Blob constructor. (i.e.\n  // old QtWebKit versions, at least).\n  function createBlob(parts, properties) {\n      /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n      parts = parts || [];\n      properties = properties || {};\n      try {\n          return new Blob(parts, properties);\n      } catch (e) {\n          if (e.name !== 'TypeError') {\n              throw e;\n          }\n          var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n          var builder = new Builder();\n          for (var i = 0; i < parts.length; i += 1) {\n              builder.append(parts[i]);\n          }\n          return builder.getBlob(properties.type);\n      }\n  }\n\n  // This is CommonJS because lie is an external dependency, so Rollup\n  // can just ignore it.\n  if (typeof Promise === 'undefined') {\n      // In the \"nopromises\" build this will just throw if you don't have\n      // a global promise object, but it would throw anyway later.\n      _dereq_(3);\n  }\n  var Promise$1 = Promise;\n\n  function executeCallback(promise, callback) {\n      if (callback) {\n          promise.then(function (result) {\n              callback(null, result);\n          }, function (error) {\n              callback(error);\n          });\n      }\n  }\n\n  function executeTwoCallbacks(promise, callback, errorCallback) {\n      if (typeof callback === 'function') {\n          promise.then(callback);\n      }\n\n      if (typeof errorCallback === 'function') {\n          promise[\"catch\"](errorCallback);\n      }\n  }\n\n  function normalizeKey(key) {\n      // Cast the key to a string, as that's all we can set as a key.\n      if (typeof key !== 'string') {\n          console.warn(key + ' used as a key, but it is not a string.');\n          key = String(key);\n      }\n\n      return key;\n  }\n\n  function getCallback() {\n      if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n          return arguments[arguments.length - 1];\n      }\n  }\n\n  // Some code originally from async_storage.js in\n  // [Gaia](https://github.com/mozilla-b2g/gaia).\n\n  var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\n  var supportsBlobs = void 0;\n  var dbContexts = {};\n  var toString = Object.prototype.toString;\n\n  // Transaction Modes\n  var READ_ONLY = 'readonly';\n  var READ_WRITE = 'readwrite';\n\n  // Transform a binary string to an array buffer, because otherwise\n  // weird stuff happens when you try to work with the binary string directly.\n  // It is known.\n  // From http://stackoverflow.com/questions/14967647/ (continues on next line)\n  // encode-decode-image-with-base64-breaks-image (2013-04-21)\n  function _binStringToArrayBuffer(bin) {\n      var length = bin.length;\n      var buf = new ArrayBuffer(length);\n      var arr = new Uint8Array(buf);\n      for (var i = 0; i < length; i++) {\n          arr[i] = bin.charCodeAt(i);\n      }\n      return buf;\n  }\n\n  //\n  // Blobs are not supported in all versions of IndexedDB, notably\n  // Chrome <37 and Android <5. In those versions, storing a blob will throw.\n  //\n  // Various other blob bugs exist in Chrome v37-42 (inclusive).\n  // Detecting them is expensive and confusing to users, and Chrome 37-42\n  // is at very low usage worldwide, so we do a hacky userAgent check instead.\n  //\n  // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n  // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n  // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n  //\n  // Code borrowed from PouchDB. See:\n  // https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n  //\n  function _checkBlobSupportWithoutCaching(idb) {\n      return new Promise$1(function (resolve) {\n          var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n          var blob = createBlob(['']);\n          txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n          txn.onabort = function (e) {\n              // If the transaction aborts now its due to not being able to\n              // write to the database, likely due to the disk being full\n              e.preventDefault();\n              e.stopPropagation();\n              resolve(false);\n          };\n\n          txn.oncomplete = function () {\n              var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n              var matchedEdge = navigator.userAgent.match(/Edge\\//);\n              // MS Edge pretends to be Chrome 42:\n              // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n              resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n          };\n      })[\"catch\"](function () {\n          return false; // error, so assume unsupported\n      });\n  }\n\n  function _checkBlobSupport(idb) {\n      if (typeof supportsBlobs === 'boolean') {\n          return Promise$1.resolve(supportsBlobs);\n      }\n      return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n          supportsBlobs = value;\n          return supportsBlobs;\n      });\n  }\n\n  function _deferReadiness(dbInfo) {\n      var dbContext = dbContexts[dbInfo.name];\n\n      // Create a deferred object representing the current database operation.\n      var deferredOperation = {};\n\n      deferredOperation.promise = new Promise$1(function (resolve, reject) {\n          deferredOperation.resolve = resolve;\n          deferredOperation.reject = reject;\n      });\n\n      // Enqueue the deferred operation.\n      dbContext.deferredOperations.push(deferredOperation);\n\n      // Chain its promise to the database readiness.\n      if (!dbContext.dbReady) {\n          dbContext.dbReady = deferredOperation.promise;\n      } else {\n          dbContext.dbReady = dbContext.dbReady.then(function () {\n              return deferredOperation.promise;\n          });\n      }\n  }\n\n  function _advanceReadiness(dbInfo) {\n      var dbContext = dbContexts[dbInfo.name];\n\n      // Dequeue a deferred operation.\n      var deferredOperation = dbContext.deferredOperations.pop();\n\n      // Resolve its promise (which is part of the database readiness\n      // chain of promises).\n      if (deferredOperation) {\n          deferredOperation.resolve();\n          return deferredOperation.promise;\n      }\n  }\n\n  function _rejectReadiness(dbInfo, err) {\n      var dbContext = dbContexts[dbInfo.name];\n\n      // Dequeue a deferred operation.\n      var deferredOperation = dbContext.deferredOperations.pop();\n\n      // Reject its promise (which is part of the database readiness\n      // chain of promises).\n      if (deferredOperation) {\n          deferredOperation.reject(err);\n          return deferredOperation.promise;\n      }\n  }\n\n  function _getConnection(dbInfo, upgradeNeeded) {\n      return new Promise$1(function (resolve, reject) {\n          dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n          if (dbInfo.db) {\n              if (upgradeNeeded) {\n                  _deferReadiness(dbInfo);\n                  dbInfo.db.close();\n              } else {\n                  return resolve(dbInfo.db);\n              }\n          }\n\n          var dbArgs = [dbInfo.name];\n\n          if (upgradeNeeded) {\n              dbArgs.push(dbInfo.version);\n          }\n\n          var openreq = idb.open.apply(idb, dbArgs);\n\n          if (upgradeNeeded) {\n              openreq.onupgradeneeded = function (e) {\n                  var db = openreq.result;\n                  try {\n                      db.createObjectStore(dbInfo.storeName);\n                      if (e.oldVersion <= 1) {\n                          // Added when support for blob shims was added\n                          db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                      }\n                  } catch (ex) {\n                      if (ex.name === 'ConstraintError') {\n                          console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                      } else {\n                          throw ex;\n                      }\n                  }\n              };\n          }\n\n          openreq.onerror = function (e) {\n              e.preventDefault();\n              reject(openreq.error);\n          };\n\n          openreq.onsuccess = function () {\n              resolve(openreq.result);\n              _advanceReadiness(dbInfo);\n          };\n      });\n  }\n\n  function _getOriginalConnection(dbInfo) {\n      return _getConnection(dbInfo, false);\n  }\n\n  function _getUpgradedConnection(dbInfo) {\n      return _getConnection(dbInfo, true);\n  }\n\n  function _isUpgradeNeeded(dbInfo, defaultVersion) {\n      if (!dbInfo.db) {\n          return true;\n      }\n\n      var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n      var isDowngrade = dbInfo.version < dbInfo.db.version;\n      var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n      if (isDowngrade) {\n          // If the version is not the default one\n          // then warn for impossible downgrade.\n          if (dbInfo.version !== defaultVersion) {\n              console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n          }\n          // Align the versions to prevent errors.\n          dbInfo.version = dbInfo.db.version;\n      }\n\n      if (isUpgrade || isNewStore) {\n          // If the store is new then increment the version (if needed).\n          // This will trigger an \"upgradeneeded\" event which is required\n          // for creating a store.\n          if (isNewStore) {\n              var incVersion = dbInfo.db.version + 1;\n              if (incVersion > dbInfo.version) {\n                  dbInfo.version = incVersion;\n              }\n          }\n\n          return true;\n      }\n\n      return false;\n  }\n\n  // encode a blob for indexeddb engines that don't support blobs\n  function _encodeBlob(blob) {\n      return new Promise$1(function (resolve, reject) {\n          var reader = new FileReader();\n          reader.onerror = reject;\n          reader.onloadend = function (e) {\n              var base64 = btoa(e.target.result || '');\n              resolve({\n                  __local_forage_encoded_blob: true,\n                  data: base64,\n                  type: blob.type\n              });\n          };\n          reader.readAsBinaryString(blob);\n      });\n  }\n\n  // decode an encoded blob\n  function _decodeBlob(encodedBlob) {\n      var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n      return createBlob([arrayBuff], { type: encodedBlob.type });\n  }\n\n  // is this one of our fancy encoded blobs?\n  function _isEncodedBlob(value) {\n      return value && value.__local_forage_encoded_blob;\n  }\n\n  // Specialize the default `ready()` function by making it dependent\n  // on the current database operations. Thus, the driver will be actually\n  // ready when it's been initialized (default) *and* there are no pending\n  // operations on the database (initiated by some other instances).\n  function _fullyReady(callback) {\n      var self = this;\n\n      var promise = self._initReady().then(function () {\n          var dbContext = dbContexts[self._dbInfo.name];\n\n          if (dbContext && dbContext.dbReady) {\n              return dbContext.dbReady;\n          }\n      });\n\n      executeTwoCallbacks(promise, callback, callback);\n      return promise;\n  }\n\n  // Try to establish a new db connection to replace the\n  // current one which is broken (i.e. experiencing\n  // InvalidStateError while creating a transaction).\n  function _tryReconnect(dbInfo) {\n      _deferReadiness(dbInfo);\n\n      var dbContext = dbContexts[dbInfo.name];\n      var forages = dbContext.forages;\n\n      for (var i = 0; i < forages.length; i++) {\n          var forage = forages[i];\n          if (forage._dbInfo.db) {\n              forage._dbInfo.db.close();\n              forage._dbInfo.db = null;\n          }\n      }\n      dbInfo.db = null;\n\n      return _getOriginalConnection(dbInfo).then(function (db) {\n          dbInfo.db = db;\n          if (_isUpgradeNeeded(dbInfo)) {\n              // Reopen the database for upgrading.\n              return _getUpgradedConnection(dbInfo);\n          }\n          return db;\n      }).then(function (db) {\n          // store the latest db reference\n          // in case the db was upgraded\n          dbInfo.db = dbContext.db = db;\n          for (var i = 0; i < forages.length; i++) {\n              forages[i]._dbInfo.db = db;\n          }\n      })[\"catch\"](function (err) {\n          _rejectReadiness(dbInfo, err);\n          throw err;\n      });\n  }\n\n  // FF doesn't like Promises (micro-tasks) and IDDB store operations,\n  // so we have to do it with callbacks\n  function createTransaction(dbInfo, mode, callback, retries) {\n      if (retries === undefined) {\n          retries = 1;\n      }\n\n      try {\n          var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n          callback(null, tx);\n      } catch (err) {\n          if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n              return Promise$1.resolve().then(function () {\n                  if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                      // increase the db version, to create the new ObjectStore\n                      if (dbInfo.db) {\n                          dbInfo.version = dbInfo.db.version + 1;\n                      }\n                      // Reopen the database for upgrading.\n                      return _getUpgradedConnection(dbInfo);\n                  }\n              }).then(function () {\n                  return _tryReconnect(dbInfo).then(function () {\n                      createTransaction(dbInfo, mode, callback, retries - 1);\n                  });\n              })[\"catch\"](callback);\n          }\n\n          callback(err);\n      }\n  }\n\n  function createDbContext() {\n      return {\n          // Running localForages sharing a database.\n          forages: [],\n          // Shared database.\n          db: null,\n          // Database readiness (promise).\n          dbReady: null,\n          // Deferred operations on the database.\n          deferredOperations: []\n      };\n  }\n\n  // Open the IndexedDB database (automatically creates one if one didn't\n  // previously exist), using any options set in the config.\n  function _initStorage(options) {\n      var self = this;\n      var dbInfo = {\n          db: null\n      };\n\n      if (options) {\n          for (var i in options) {\n              dbInfo[i] = options[i];\n          }\n      }\n\n      // Get the current context of the database;\n      var dbContext = dbContexts[dbInfo.name];\n\n      // ...or create a new context.\n      if (!dbContext) {\n          dbContext = createDbContext();\n          // Register the new context in the global container.\n          dbContexts[dbInfo.name] = dbContext;\n      }\n\n      // Register itself as a running localForage in the current context.\n      dbContext.forages.push(self);\n\n      // Replace the default `ready()` function with the specialized one.\n      if (!self._initReady) {\n          self._initReady = self.ready;\n          self.ready = _fullyReady;\n      }\n\n      // Create an array of initialization states of the related localForages.\n      var initPromises = [];\n\n      function ignoreErrors() {\n          // Don't handle errors here,\n          // just makes sure related localForages aren't pending.\n          return Promise$1.resolve();\n      }\n\n      for (var j = 0; j < dbContext.forages.length; j++) {\n          var forage = dbContext.forages[j];\n          if (forage !== self) {\n              // Don't wait for itself...\n              initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n          }\n      }\n\n      // Take a snapshot of the related localForages.\n      var forages = dbContext.forages.slice(0);\n\n      // Initialize the connection process only when\n      // all the related localForages aren't pending.\n      return Promise$1.all(initPromises).then(function () {\n          dbInfo.db = dbContext.db;\n          // Get the connection or open a new one without upgrade.\n          return _getOriginalConnection(dbInfo);\n      }).then(function (db) {\n          dbInfo.db = db;\n          if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n              // Reopen the database for upgrading.\n              return _getUpgradedConnection(dbInfo);\n          }\n          return db;\n      }).then(function (db) {\n          dbInfo.db = dbContext.db = db;\n          self._dbInfo = dbInfo;\n          // Share the final connection amongst related localForages.\n          for (var k = 0; k < forages.length; k++) {\n              var forage = forages[k];\n              if (forage !== self) {\n                  // Self is already up-to-date.\n                  forage._dbInfo.db = dbInfo.db;\n                  forage._dbInfo.version = dbInfo.version;\n              }\n          }\n      });\n  }\n\n  function getItem(key, callback) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                  if (err) {\n                      return reject(err);\n                  }\n\n                  try {\n                      var store = transaction.objectStore(self._dbInfo.storeName);\n                      var req = store.get(key);\n\n                      req.onsuccess = function () {\n                          var value = req.result;\n                          if (value === undefined) {\n                              value = null;\n                          }\n                          if (_isEncodedBlob(value)) {\n                              value = _decodeBlob(value);\n                          }\n                          resolve(value);\n                      };\n\n                      req.onerror = function () {\n                          reject(req.error);\n                      };\n                  } catch (e) {\n                      reject(e);\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Iterate over all items stored in database.\n  function iterate(iterator, callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                  if (err) {\n                      return reject(err);\n                  }\n\n                  try {\n                      var store = transaction.objectStore(self._dbInfo.storeName);\n                      var req = store.openCursor();\n                      var iterationNumber = 1;\n\n                      req.onsuccess = function () {\n                          var cursor = req.result;\n\n                          if (cursor) {\n                              var value = cursor.value;\n                              if (_isEncodedBlob(value)) {\n                                  value = _decodeBlob(value);\n                              }\n                              var result = iterator(value, cursor.key, iterationNumber++);\n\n                              // when the iterator callback returns any\n                              // (non-`undefined`) value, then we stop\n                              // the iteration immediately\n                              if (result !== void 0) {\n                                  resolve(result);\n                              } else {\n                                  cursor[\"continue\"]();\n                              }\n                          } else {\n                              resolve();\n                          }\n                      };\n\n                      req.onerror = function () {\n                          reject(req.error);\n                      };\n                  } catch (e) {\n                      reject(e);\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n\n      return promise;\n  }\n\n  function setItem(key, value, callback) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = new Promise$1(function (resolve, reject) {\n          var dbInfo;\n          self.ready().then(function () {\n              dbInfo = self._dbInfo;\n              if (toString.call(value) === '[object Blob]') {\n                  return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                      if (blobSupport) {\n                          return value;\n                      }\n                      return _encodeBlob(value);\n                  });\n              }\n              return value;\n          }).then(function (value) {\n              createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                  if (err) {\n                      return reject(err);\n                  }\n\n                  try {\n                      var store = transaction.objectStore(self._dbInfo.storeName);\n\n                      // The reason we don't _save_ null is because IE 10 does\n                      // not support saving the `null` type in IndexedDB. How\n                      // ironic, given the bug below!\n                      // See: https://github.com/mozilla/localForage/issues/161\n                      if (value === null) {\n                          value = undefined;\n                      }\n\n                      var req = store.put(value, key);\n\n                      transaction.oncomplete = function () {\n                          // Cast to undefined so the value passed to\n                          // callback/promise is the same as what one would get out\n                          // of `getItem()` later. This leads to some weirdness\n                          // (setItem('foo', undefined) will return `null`), but\n                          // it's not my fault localStorage is our baseline and that\n                          // it's weird.\n                          if (value === undefined) {\n                              value = null;\n                          }\n\n                          resolve(value);\n                      };\n                      transaction.onabort = transaction.onerror = function () {\n                          var err = req.error ? req.error : req.transaction.error;\n                          reject(err);\n                      };\n                  } catch (e) {\n                      reject(e);\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function removeItem(key, callback) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                  if (err) {\n                      return reject(err);\n                  }\n\n                  try {\n                      var store = transaction.objectStore(self._dbInfo.storeName);\n                      // We use a Grunt task to make this safe for IE and some\n                      // versions of Android (including those used by Cordova).\n                      // Normally IE won't like `.delete()` and will insist on\n                      // using `['delete']()`, but we have a build step that\n                      // fixes this for us now.\n                      var req = store[\"delete\"](key);\n                      transaction.oncomplete = function () {\n                          resolve();\n                      };\n\n                      transaction.onerror = function () {\n                          reject(req.error);\n                      };\n\n                      // The request will be also be aborted if we've exceeded our storage\n                      // space.\n                      transaction.onabort = function () {\n                          var err = req.error ? req.error : req.transaction.error;\n                          reject(err);\n                      };\n                  } catch (e) {\n                      reject(e);\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function clear(callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                  if (err) {\n                      return reject(err);\n                  }\n\n                  try {\n                      var store = transaction.objectStore(self._dbInfo.storeName);\n                      var req = store.clear();\n\n                      transaction.oncomplete = function () {\n                          resolve();\n                      };\n\n                      transaction.onabort = transaction.onerror = function () {\n                          var err = req.error ? req.error : req.transaction.error;\n                          reject(err);\n                      };\n                  } catch (e) {\n                      reject(e);\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function length(callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                  if (err) {\n                      return reject(err);\n                  }\n\n                  try {\n                      var store = transaction.objectStore(self._dbInfo.storeName);\n                      var req = store.count();\n\n                      req.onsuccess = function () {\n                          resolve(req.result);\n                      };\n\n                      req.onerror = function () {\n                          reject(req.error);\n                      };\n                  } catch (e) {\n                      reject(e);\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function key(n, callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          if (n < 0) {\n              resolve(null);\n\n              return;\n          }\n\n          self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                  if (err) {\n                      return reject(err);\n                  }\n\n                  try {\n                      var store = transaction.objectStore(self._dbInfo.storeName);\n                      var advanced = false;\n                      var req = store.openKeyCursor();\n\n                      req.onsuccess = function () {\n                          var cursor = req.result;\n                          if (!cursor) {\n                              // this means there weren't enough keys\n                              resolve(null);\n\n                              return;\n                          }\n\n                          if (n === 0) {\n                              // We have the first key, return it if that's what they\n                              // wanted.\n                              resolve(cursor.key);\n                          } else {\n                              if (!advanced) {\n                                  // Otherwise, ask the cursor to skip ahead n\n                                  // records.\n                                  advanced = true;\n                                  cursor.advance(n);\n                              } else {\n                                  // When we get here, we've got the nth key.\n                                  resolve(cursor.key);\n                              }\n                          }\n                      };\n\n                      req.onerror = function () {\n                          reject(req.error);\n                      };\n                  } catch (e) {\n                      reject(e);\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function keys(callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                  if (err) {\n                      return reject(err);\n                  }\n\n                  try {\n                      var store = transaction.objectStore(self._dbInfo.storeName);\n                      var req = store.openKeyCursor();\n                      var keys = [];\n\n                      req.onsuccess = function () {\n                          var cursor = req.result;\n\n                          if (!cursor) {\n                              resolve(keys);\n                              return;\n                          }\n\n                          keys.push(cursor.key);\n                          cursor[\"continue\"]();\n                      };\n\n                      req.onerror = function () {\n                          reject(req.error);\n                      };\n                  } catch (e) {\n                      reject(e);\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function dropInstance(options, callback) {\n      callback = getCallback.apply(this, arguments);\n\n      var currentConfig = this.config();\n      options = typeof options !== 'function' && options || {};\n      if (!options.name) {\n          options.name = options.name || currentConfig.name;\n          options.storeName = options.storeName || currentConfig.storeName;\n      }\n\n      var self = this;\n      var promise;\n      if (!options.name) {\n          promise = Promise$1.reject('Invalid arguments');\n      } else {\n          var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n          var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n              var dbContext = dbContexts[options.name];\n              var forages = dbContext.forages;\n              dbContext.db = db;\n              for (var i = 0; i < forages.length; i++) {\n                  forages[i]._dbInfo.db = db;\n              }\n              return db;\n          });\n\n          if (!options.storeName) {\n              promise = dbPromise.then(function (db) {\n                  _deferReadiness(options);\n\n                  var dbContext = dbContexts[options.name];\n                  var forages = dbContext.forages;\n\n                  db.close();\n                  for (var i = 0; i < forages.length; i++) {\n                      var forage = forages[i];\n                      forage._dbInfo.db = null;\n                  }\n\n                  var dropDBPromise = new Promise$1(function (resolve, reject) {\n                      var req = idb.deleteDatabase(options.name);\n\n                      req.onerror = req.onblocked = function (err) {\n                          var db = req.result;\n                          if (db) {\n                              db.close();\n                          }\n                          reject(err);\n                      };\n\n                      req.onsuccess = function () {\n                          var db = req.result;\n                          if (db) {\n                              db.close();\n                          }\n                          resolve(db);\n                      };\n                  });\n\n                  return dropDBPromise.then(function (db) {\n                      dbContext.db = db;\n                      for (var i = 0; i < forages.length; i++) {\n                          var _forage = forages[i];\n                          _advanceReadiness(_forage._dbInfo);\n                      }\n                  })[\"catch\"](function (err) {\n                      (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                      throw err;\n                  });\n              });\n          } else {\n              promise = dbPromise.then(function (db) {\n                  if (!db.objectStoreNames.contains(options.storeName)) {\n                      return;\n                  }\n\n                  var newVersion = db.version + 1;\n\n                  _deferReadiness(options);\n\n                  var dbContext = dbContexts[options.name];\n                  var forages = dbContext.forages;\n\n                  db.close();\n                  for (var i = 0; i < forages.length; i++) {\n                      var forage = forages[i];\n                      forage._dbInfo.db = null;\n                      forage._dbInfo.version = newVersion;\n                  }\n\n                  var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                      var req = idb.open(options.name, newVersion);\n\n                      req.onerror = function (err) {\n                          var db = req.result;\n                          db.close();\n                          reject(err);\n                      };\n\n                      req.onupgradeneeded = function () {\n                          var db = req.result;\n                          db.deleteObjectStore(options.storeName);\n                      };\n\n                      req.onsuccess = function () {\n                          var db = req.result;\n                          db.close();\n                          resolve(db);\n                      };\n                  });\n\n                  return dropObjectPromise.then(function (db) {\n                      dbContext.db = db;\n                      for (var j = 0; j < forages.length; j++) {\n                          var _forage2 = forages[j];\n                          _forage2._dbInfo.db = db;\n                          _advanceReadiness(_forage2._dbInfo);\n                      }\n                  })[\"catch\"](function (err) {\n                      (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                      throw err;\n                  });\n              });\n          }\n      }\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  var asyncStorage = {\n      _driver: 'asyncStorage',\n      _initStorage: _initStorage,\n      _support: isIndexedDBValid(),\n      iterate: iterate,\n      getItem: getItem,\n      setItem: setItem,\n      removeItem: removeItem,\n      clear: clear,\n      length: length,\n      key: key,\n      keys: keys,\n      dropInstance: dropInstance\n  };\n\n  function isWebSQLValid() {\n      return typeof openDatabase === 'function';\n  }\n\n  // Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n  // it to Base64, so this is how we store it to prevent very strange errors with less\n  // verbose ways of binary <-> string data storage.\n  var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n  var BLOB_TYPE_PREFIX = '~~local_forage_type~';\n  var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\n  var SERIALIZED_MARKER = '__lfsc__:';\n  var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n  // OMG the serializations!\n  var TYPE_ARRAYBUFFER = 'arbf';\n  var TYPE_BLOB = 'blob';\n  var TYPE_INT8ARRAY = 'si08';\n  var TYPE_UINT8ARRAY = 'ui08';\n  var TYPE_UINT8CLAMPEDARRAY = 'uic8';\n  var TYPE_INT16ARRAY = 'si16';\n  var TYPE_INT32ARRAY = 'si32';\n  var TYPE_UINT16ARRAY = 'ur16';\n  var TYPE_UINT32ARRAY = 'ui32';\n  var TYPE_FLOAT32ARRAY = 'fl32';\n  var TYPE_FLOAT64ARRAY = 'fl64';\n  var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\n  var toString$1 = Object.prototype.toString;\n\n  function stringToBuffer(serializedString) {\n      // Fill the string into a ArrayBuffer.\n      var bufferLength = serializedString.length * 0.75;\n      var len = serializedString.length;\n      var i;\n      var p = 0;\n      var encoded1, encoded2, encoded3, encoded4;\n\n      if (serializedString[serializedString.length - 1] === '=') {\n          bufferLength--;\n          if (serializedString[serializedString.length - 2] === '=') {\n              bufferLength--;\n          }\n      }\n\n      var buffer = new ArrayBuffer(bufferLength);\n      var bytes = new Uint8Array(buffer);\n\n      for (i = 0; i < len; i += 4) {\n          encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n          encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n          encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n          encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n          /*jslint bitwise: true */\n          bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n          bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n          bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n      }\n      return buffer;\n  }\n\n  // Converts a buffer to a string to store, serialized, in the backend\n  // storage library.\n  function bufferToString(buffer) {\n      // base64-arraybuffer\n      var bytes = new Uint8Array(buffer);\n      var base64String = '';\n      var i;\n\n      for (i = 0; i < bytes.length; i += 3) {\n          /*jslint bitwise: true */\n          base64String += BASE_CHARS[bytes[i] >> 2];\n          base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n          base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n          base64String += BASE_CHARS[bytes[i + 2] & 63];\n      }\n\n      if (bytes.length % 3 === 2) {\n          base64String = base64String.substring(0, base64String.length - 1) + '=';\n      } else if (bytes.length % 3 === 1) {\n          base64String = base64String.substring(0, base64String.length - 2) + '==';\n      }\n\n      return base64String;\n  }\n\n  // Serialize a value, afterwards executing a callback (which usually\n  // instructs the `setItem()` callback/promise to be executed). This is how\n  // we store binary data with localStorage.\n  function serialize(value, callback) {\n      var valueType = '';\n      if (value) {\n          valueType = toString$1.call(value);\n      }\n\n      // Cannot use `value instanceof ArrayBuffer` or such here, as these\n      // checks fail when running the tests using casper.js...\n      //\n      // TODO: See why those tests fail and use a better solution.\n      if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n          // Convert binary arrays to a string and prefix the string with\n          // a special marker.\n          var buffer;\n          var marker = SERIALIZED_MARKER;\n\n          if (value instanceof ArrayBuffer) {\n              buffer = value;\n              marker += TYPE_ARRAYBUFFER;\n          } else {\n              buffer = value.buffer;\n\n              if (valueType === '[object Int8Array]') {\n                  marker += TYPE_INT8ARRAY;\n              } else if (valueType === '[object Uint8Array]') {\n                  marker += TYPE_UINT8ARRAY;\n              } else if (valueType === '[object Uint8ClampedArray]') {\n                  marker += TYPE_UINT8CLAMPEDARRAY;\n              } else if (valueType === '[object Int16Array]') {\n                  marker += TYPE_INT16ARRAY;\n              } else if (valueType === '[object Uint16Array]') {\n                  marker += TYPE_UINT16ARRAY;\n              } else if (valueType === '[object Int32Array]') {\n                  marker += TYPE_INT32ARRAY;\n              } else if (valueType === '[object Uint32Array]') {\n                  marker += TYPE_UINT32ARRAY;\n              } else if (valueType === '[object Float32Array]') {\n                  marker += TYPE_FLOAT32ARRAY;\n              } else if (valueType === '[object Float64Array]') {\n                  marker += TYPE_FLOAT64ARRAY;\n              } else {\n                  callback(new Error('Failed to get type for BinaryArray'));\n              }\n          }\n\n          callback(marker + bufferToString(buffer));\n      } else if (valueType === '[object Blob]') {\n          // Conver the blob to a binaryArray and then to a string.\n          var fileReader = new FileReader();\n\n          fileReader.onload = function () {\n              // Backwards-compatible prefix for the blob type.\n              var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n              callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n          };\n\n          fileReader.readAsArrayBuffer(value);\n      } else {\n          try {\n              callback(JSON.stringify(value));\n          } catch (e) {\n              console.error(\"Couldn't convert value into a JSON string: \", value);\n\n              callback(null, e);\n          }\n      }\n  }\n\n  // Deserialize data we've inserted into a value column/field. We place\n  // special markers into our strings to mark them as encoded; this isn't\n  // as nice as a meta field, but it's the only sane thing we can do whilst\n  // keeping localStorage support intact.\n  //\n  // Oftentimes this will just deserialize JSON content, but if we have a\n  // special marker (SERIALIZED_MARKER, defined above), we will extract\n  // some kind of arraybuffer/binary data/typed array out of the string.\n  function deserialize(value) {\n      // If we haven't marked this string as being specially serialized (i.e.\n      // something other than serialized JSON), we can just return it and be\n      // done with it.\n      if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n          return JSON.parse(value);\n      }\n\n      // The following code deals with deserializing some kind of Blob or\n      // TypedArray. First we separate out the type of data we're dealing\n      // with from the data itself.\n      var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n      var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n      var blobType;\n      // Backwards-compatible blob type serialization strategy.\n      // DBs created with older versions of localForage will simply not have the blob type.\n      if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n          var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n          blobType = matcher[1];\n          serializedString = serializedString.substring(matcher[0].length);\n      }\n      var buffer = stringToBuffer(serializedString);\n\n      // Return the right type based on the code/type set during\n      // serialization.\n      switch (type) {\n          case TYPE_ARRAYBUFFER:\n              return buffer;\n          case TYPE_BLOB:\n              return createBlob([buffer], { type: blobType });\n          case TYPE_INT8ARRAY:\n              return new Int8Array(buffer);\n          case TYPE_UINT8ARRAY:\n              return new Uint8Array(buffer);\n          case TYPE_UINT8CLAMPEDARRAY:\n              return new Uint8ClampedArray(buffer);\n          case TYPE_INT16ARRAY:\n              return new Int16Array(buffer);\n          case TYPE_UINT16ARRAY:\n              return new Uint16Array(buffer);\n          case TYPE_INT32ARRAY:\n              return new Int32Array(buffer);\n          case TYPE_UINT32ARRAY:\n              return new Uint32Array(buffer);\n          case TYPE_FLOAT32ARRAY:\n              return new Float32Array(buffer);\n          case TYPE_FLOAT64ARRAY:\n              return new Float64Array(buffer);\n          default:\n              throw new Error('Unkown type: ' + type);\n      }\n  }\n\n  var localforageSerializer = {\n      serialize: serialize,\n      deserialize: deserialize,\n      stringToBuffer: stringToBuffer,\n      bufferToString: bufferToString\n  };\n\n  /*\n   * Includes code from:\n   *\n   * base64-arraybuffer\n   * https://github.com/niklasvh/base64-arraybuffer\n   *\n   * Copyright (c) 2012 Niklas von Hertzen\n   * Licensed under the MIT license.\n   */\n\n  function createDbTable(t, dbInfo, callback, errorCallback) {\n      t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n  }\n\n  // Open the WebSQL database (automatically creates one if one didn't\n  // previously exist), using any options set in the config.\n  function _initStorage$1(options) {\n      var self = this;\n      var dbInfo = {\n          db: null\n      };\n\n      if (options) {\n          for (var i in options) {\n              dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n          }\n      }\n\n      var dbInfoPromise = new Promise$1(function (resolve, reject) {\n          // Open the database; the openDatabase API will automatically\n          // create it for us if it doesn't exist.\n          try {\n              dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n          } catch (e) {\n              return reject(e);\n          }\n\n          // Create our key/value table if it doesn't exist.\n          dbInfo.db.transaction(function (t) {\n              createDbTable(t, dbInfo, function () {\n                  self._dbInfo = dbInfo;\n                  resolve();\n              }, function (t, error) {\n                  reject(error);\n              });\n          }, reject);\n      });\n\n      dbInfo.serializer = localforageSerializer;\n      return dbInfoPromise;\n  }\n\n  function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n      t.executeSql(sqlStatement, args, callback, function (t, error) {\n          if (error.code === error.SYNTAX_ERR) {\n              t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                  if (!results.rows.length) {\n                      // if the table is missing (was deleted)\n                      // re-create it table and retry\n                      createDbTable(t, dbInfo, function () {\n                          t.executeSql(sqlStatement, args, callback, errorCallback);\n                      }, errorCallback);\n                  } else {\n                      errorCallback(t, error);\n                  }\n              }, errorCallback);\n          } else {\n              errorCallback(t, error);\n          }\n      }, errorCallback);\n  }\n\n  function getItem$1(key, callback) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                  tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                      var result = results.rows.length ? results.rows.item(0).value : null;\n\n                      // Check to see if this is serialized content we need to\n                      // unpack.\n                      if (result) {\n                          result = dbInfo.serializer.deserialize(result);\n                      }\n\n                      resolve(result);\n                  }, function (t, error) {\n                      reject(error);\n                  });\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function iterate$1(iterator, callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n\n              dbInfo.db.transaction(function (t) {\n                  tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                      var rows = results.rows;\n                      var length = rows.length;\n\n                      for (var i = 0; i < length; i++) {\n                          var item = rows.item(i);\n                          var result = item.value;\n\n                          // Check to see if this is serialized content\n                          // we need to unpack.\n                          if (result) {\n                              result = dbInfo.serializer.deserialize(result);\n                          }\n\n                          result = iterator(result, item.key, i + 1);\n\n                          // void(0) prevents problems with redefinition\n                          // of `undefined`.\n                          if (result !== void 0) {\n                              resolve(result);\n                              return;\n                          }\n                      }\n\n                      resolve();\n                  }, function (t, error) {\n                      reject(error);\n                  });\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function _setItem(key, value, callback, retriesLeft) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              // The localStorage API doesn't return undefined values in an\n              // \"expected\" way, so undefined is always cast to null in all\n              // drivers. See: https://github.com/mozilla/localForage/pull/42\n              if (value === undefined) {\n                  value = null;\n              }\n\n              // Save the original value to pass to the callback.\n              var originalValue = value;\n\n              var dbInfo = self._dbInfo;\n              dbInfo.serializer.serialize(value, function (value, error) {\n                  if (error) {\n                      reject(error);\n                  } else {\n                      dbInfo.db.transaction(function (t) {\n                          tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                              resolve(originalValue);\n                          }, function (t, error) {\n                              reject(error);\n                          });\n                      }, function (sqlError) {\n                          // The transaction failed; check\n                          // to see if it's a quota error.\n                          if (sqlError.code === sqlError.QUOTA_ERR) {\n                              // We reject the callback outright for now, but\n                              // it's worth trying to re-run the transaction.\n                              // Even if the user accepts the prompt to use\n                              // more storage on Safari, this error will\n                              // be called.\n                              //\n                              // Try to re-run the transaction.\n                              if (retriesLeft > 0) {\n                                  resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                  return;\n                              }\n                              reject(sqlError);\n                          }\n                      });\n                  }\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function setItem$1(key, value, callback) {\n      return _setItem.apply(this, [key, value, callback, 1]);\n  }\n\n  function removeItem$1(key, callback) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                  tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                      resolve();\n                  }, function (t, error) {\n                      reject(error);\n                  });\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Deletes every item in the table.\n  // TODO: Find out if this resets the AUTO_INCREMENT number.\n  function clear$1(callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                  tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                      resolve();\n                  }, function (t, error) {\n                      reject(error);\n                  });\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Does a simple `COUNT(key)` to get the number of items stored in\n  // localForage.\n  function length$1(callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                  // Ahhh, SQL makes this one soooooo easy.\n                  tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                      var result = results.rows.item(0).c;\n                      resolve(result);\n                  }, function (t, error) {\n                      reject(error);\n                  });\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Return the key located at key index X; essentially gets the key from a\n  // `WHERE id = ?`. This is the most efficient way I can think to implement\n  // this rarely-used (in my experience) part of the API, but it can seem\n  // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n  // the ID of each key will change every time it's updated. Perhaps a stored\n  // procedure for the `setItem()` SQL would solve this problem?\n  // TODO: Don't change ID on `setItem()`.\n  function key$1(n, callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                  tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                      var result = results.rows.length ? results.rows.item(0).key : null;\n                      resolve(result);\n                  }, function (t, error) {\n                      reject(error);\n                  });\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function keys$1(callback) {\n      var self = this;\n\n      var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                  tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                      var keys = [];\n\n                      for (var i = 0; i < results.rows.length; i++) {\n                          keys.push(results.rows.item(i).key);\n                      }\n\n                      resolve(keys);\n                  }, function (t, error) {\n                      reject(error);\n                  });\n              });\n          })[\"catch\"](reject);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // https://www.w3.org/TR/webdatabase/#databases\n  // > There is no way to enumerate or delete the databases available for an origin from this API.\n  function getAllStoreNames(db) {\n      return new Promise$1(function (resolve, reject) {\n          db.transaction(function (t) {\n              t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                  var storeNames = [];\n\n                  for (var i = 0; i < results.rows.length; i++) {\n                      storeNames.push(results.rows.item(i).name);\n                  }\n\n                  resolve({\n                      db: db,\n                      storeNames: storeNames\n                  });\n              }, function (t, error) {\n                  reject(error);\n              });\n          }, function (sqlError) {\n              reject(sqlError);\n          });\n      });\n  }\n\n  function dropInstance$1(options, callback) {\n      callback = getCallback.apply(this, arguments);\n\n      var currentConfig = this.config();\n      options = typeof options !== 'function' && options || {};\n      if (!options.name) {\n          options.name = options.name || currentConfig.name;\n          options.storeName = options.storeName || currentConfig.storeName;\n      }\n\n      var self = this;\n      var promise;\n      if (!options.name) {\n          promise = Promise$1.reject('Invalid arguments');\n      } else {\n          promise = new Promise$1(function (resolve) {\n              var db;\n              if (options.name === currentConfig.name) {\n                  // use the db reference of the current instance\n                  db = self._dbInfo.db;\n              } else {\n                  db = openDatabase(options.name, '', '', 0);\n              }\n\n              if (!options.storeName) {\n                  // drop all database tables\n                  resolve(getAllStoreNames(db));\n              } else {\n                  resolve({\n                      db: db,\n                      storeNames: [options.storeName]\n                  });\n              }\n          }).then(function (operationInfo) {\n              return new Promise$1(function (resolve, reject) {\n                  operationInfo.db.transaction(function (t) {\n                      function dropTable(storeName) {\n                          return new Promise$1(function (resolve, reject) {\n                              t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                  resolve();\n                              }, function (t, error) {\n                                  reject(error);\n                              });\n                          });\n                      }\n\n                      var operations = [];\n                      for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                          operations.push(dropTable(operationInfo.storeNames[i]));\n                      }\n\n                      Promise$1.all(operations).then(function () {\n                          resolve();\n                      })[\"catch\"](function (e) {\n                          reject(e);\n                      });\n                  }, function (sqlError) {\n                      reject(sqlError);\n                  });\n              });\n          });\n      }\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  var webSQLStorage = {\n      _driver: 'webSQLStorage',\n      _initStorage: _initStorage$1,\n      _support: isWebSQLValid(),\n      iterate: iterate$1,\n      getItem: getItem$1,\n      setItem: setItem$1,\n      removeItem: removeItem$1,\n      clear: clear$1,\n      length: length$1,\n      key: key$1,\n      keys: keys$1,\n      dropInstance: dropInstance$1\n  };\n\n  function isLocalStorageValid() {\n      try {\n          return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n          // in IE8 typeof localStorage.setItem === 'object'\n          !!localStorage.setItem;\n      } catch (e) {\n          return false;\n      }\n  }\n\n  function _getKeyPrefix(options, defaultConfig) {\n      var keyPrefix = options.name + '/';\n\n      if (options.storeName !== defaultConfig.storeName) {\n          keyPrefix += options.storeName + '/';\n      }\n      return keyPrefix;\n  }\n\n  // Check if localStorage throws when saving an item\n  function checkIfLocalStorageThrows() {\n      var localStorageTestKey = '_localforage_support_test';\n\n      try {\n          localStorage.setItem(localStorageTestKey, true);\n          localStorage.removeItem(localStorageTestKey);\n\n          return false;\n      } catch (e) {\n          return true;\n      }\n  }\n\n  // Check if localStorage is usable and allows to save an item\n  // This method checks if localStorage is usable in Safari Private Browsing\n  // mode, or in any other case where the available quota for localStorage\n  // is 0 and there wasn't any saved items yet.\n  function _isLocalStorageUsable() {\n      return !checkIfLocalStorageThrows() || localStorage.length > 0;\n  }\n\n  // Config the localStorage backend, using options set in the config.\n  function _initStorage$2(options) {\n      var self = this;\n      var dbInfo = {};\n      if (options) {\n          for (var i in options) {\n              dbInfo[i] = options[i];\n          }\n      }\n\n      dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n      if (!_isLocalStorageUsable()) {\n          return Promise$1.reject();\n      }\n\n      self._dbInfo = dbInfo;\n      dbInfo.serializer = localforageSerializer;\n\n      return Promise$1.resolve();\n  }\n\n  // Remove all keys from the datastore, effectively destroying all data in\n  // the app's key/value store!\n  function clear$2(callback) {\n      var self = this;\n      var promise = self.ready().then(function () {\n          var keyPrefix = self._dbInfo.keyPrefix;\n\n          for (var i = localStorage.length - 1; i >= 0; i--) {\n              var key = localStorage.key(i);\n\n              if (key.indexOf(keyPrefix) === 0) {\n                  localStorage.removeItem(key);\n              }\n          }\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Retrieve an item from the store. Unlike the original async_storage\n  // library in Gaia, we don't modify return values at all. If a key's value\n  // is `undefined`, we pass that value to the callback function.\n  function getItem$2(key, callback) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n          // If a result was found, parse it from the serialized\n          // string into a JS object. If result isn't truthy, the key\n          // is likely undefined and we'll pass it straight to the\n          // callback.\n          if (result) {\n              result = dbInfo.serializer.deserialize(result);\n          }\n\n          return result;\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Iterate over all items in the store.\n  function iterate$2(iterator, callback) {\n      var self = this;\n\n      var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          var keyPrefix = dbInfo.keyPrefix;\n          var keyPrefixLength = keyPrefix.length;\n          var length = localStorage.length;\n\n          // We use a dedicated iterator instead of the `i` variable below\n          // so other keys we fetch in localStorage aren't counted in\n          // the `iterationNumber` argument passed to the `iterate()`\n          // callback.\n          //\n          // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n          var iterationNumber = 1;\n\n          for (var i = 0; i < length; i++) {\n              var key = localStorage.key(i);\n              if (key.indexOf(keyPrefix) !== 0) {\n                  continue;\n              }\n              var value = localStorage.getItem(key);\n\n              // If a result was found, parse it from the serialized\n              // string into a JS object. If result isn't truthy, the\n              // key is likely undefined and we'll pass it straight\n              // to the iterator.\n              if (value) {\n                  value = dbInfo.serializer.deserialize(value);\n              }\n\n              value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n              if (value !== void 0) {\n                  return value;\n              }\n          }\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Same as localStorage's key() method, except takes a callback.\n  function key$2(n, callback) {\n      var self = this;\n      var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          var result;\n          try {\n              result = localStorage.key(n);\n          } catch (error) {\n              result = null;\n          }\n\n          // Remove the prefix from the key, if a key is found.\n          if (result) {\n              result = result.substring(dbInfo.keyPrefix.length);\n          }\n\n          return result;\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function keys$2(callback) {\n      var self = this;\n      var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          var length = localStorage.length;\n          var keys = [];\n\n          for (var i = 0; i < length; i++) {\n              var itemKey = localStorage.key(i);\n              if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                  keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n              }\n          }\n\n          return keys;\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Supply the number of keys in the datastore to the callback function.\n  function length$2(callback) {\n      var self = this;\n      var promise = self.keys().then(function (keys) {\n          return keys.length;\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Remove an item from the store, nice and simple.\n  function removeItem$2(key, callback) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          localStorage.removeItem(dbInfo.keyPrefix + key);\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  // Set a key's value and run an optional callback once the value is set.\n  // Unlike Gaia's implementation, the callback function is passed the value,\n  // in case you want to operate on that value only after you're sure it\n  // saved, or something like that.\n  function setItem$2(key, value, callback) {\n      var self = this;\n\n      key = normalizeKey(key);\n\n      var promise = self.ready().then(function () {\n          // Convert undefined values to null.\n          // https://github.com/mozilla/localForage/pull/42\n          if (value === undefined) {\n              value = null;\n          }\n\n          // Save the original value to pass to the callback.\n          var originalValue = value;\n\n          return new Promise$1(function (resolve, reject) {\n              var dbInfo = self._dbInfo;\n              dbInfo.serializer.serialize(value, function (value, error) {\n                  if (error) {\n                      reject(error);\n                  } else {\n                      try {\n                          localStorage.setItem(dbInfo.keyPrefix + key, value);\n                          resolve(originalValue);\n                      } catch (e) {\n                          // localStorage capacity exceeded.\n                          // TODO: Make this a specific error/event.\n                          if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                              reject(e);\n                          }\n                          reject(e);\n                      }\n                  }\n              });\n          });\n      });\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  function dropInstance$2(options, callback) {\n      callback = getCallback.apply(this, arguments);\n\n      options = typeof options !== 'function' && options || {};\n      if (!options.name) {\n          var currentConfig = this.config();\n          options.name = options.name || currentConfig.name;\n          options.storeName = options.storeName || currentConfig.storeName;\n      }\n\n      var self = this;\n      var promise;\n      if (!options.name) {\n          promise = Promise$1.reject('Invalid arguments');\n      } else {\n          promise = new Promise$1(function (resolve) {\n              if (!options.storeName) {\n                  resolve(options.name + '/');\n              } else {\n                  resolve(_getKeyPrefix(options, self._defaultConfig));\n              }\n          }).then(function (keyPrefix) {\n              for (var i = localStorage.length - 1; i >= 0; i--) {\n                  var key = localStorage.key(i);\n\n                  if (key.indexOf(keyPrefix) === 0) {\n                      localStorage.removeItem(key);\n                  }\n              }\n          });\n      }\n\n      executeCallback(promise, callback);\n      return promise;\n  }\n\n  var localStorageWrapper = {\n      _driver: 'localStorageWrapper',\n      _initStorage: _initStorage$2,\n      _support: isLocalStorageValid(),\n      iterate: iterate$2,\n      getItem: getItem$2,\n      setItem: setItem$2,\n      removeItem: removeItem$2,\n      clear: clear$2,\n      length: length$2,\n      key: key$2,\n      keys: keys$2,\n      dropInstance: dropInstance$2\n  };\n\n  var sameValue = function sameValue(x, y) {\n      return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n  };\n\n  var includes = function includes(array, searchElement) {\n      var len = array.length;\n      var i = 0;\n      while (i < len) {\n          if (sameValue(array[i], searchElement)) {\n              return true;\n          }\n          i++;\n      }\n\n      return false;\n  };\n\n  var isArray = Array.isArray || function (arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n\n  // Drivers are stored here when `defineDriver()` is called.\n  // They are shared across all instances of localForage.\n  var DefinedDrivers = {};\n\n  var DriverSupport = {};\n\n  var DefaultDrivers = {\n      INDEXEDDB: asyncStorage,\n      WEBSQL: webSQLStorage,\n      LOCALSTORAGE: localStorageWrapper\n  };\n\n  var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\n  var OptionalDriverMethods = ['dropInstance'];\n\n  var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\n  var DefaultConfig = {\n      description: '',\n      driver: DefaultDriverOrder.slice(),\n      name: 'localforage',\n      // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n      // we can use without a prompt.\n      size: 4980736,\n      storeName: 'keyvaluepairs',\n      version: 1.0\n  };\n\n  function callWhenReady(localForageInstance, libraryMethod) {\n      localForageInstance[libraryMethod] = function () {\n          var _args = arguments;\n          return localForageInstance.ready().then(function () {\n              return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n          });\n      };\n  }\n\n  function extend() {\n      for (var i = 1; i < arguments.length; i++) {\n          var arg = arguments[i];\n\n          if (arg) {\n              for (var _key in arg) {\n                  if (arg.hasOwnProperty(_key)) {\n                      if (isArray(arg[_key])) {\n                          arguments[0][_key] = arg[_key].slice();\n                      } else {\n                          arguments[0][_key] = arg[_key];\n                      }\n                  }\n              }\n          }\n      }\n\n      return arguments[0];\n  }\n\n  var LocalForage = function () {\n      function LocalForage(options) {\n          _classCallCheck(this, LocalForage);\n\n          for (var driverTypeKey in DefaultDrivers) {\n              if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                  var driver = DefaultDrivers[driverTypeKey];\n                  var driverName = driver._driver;\n                  this[driverTypeKey] = driverName;\n\n                  if (!DefinedDrivers[driverName]) {\n                      // we don't need to wait for the promise,\n                      // since the default drivers can be defined\n                      // in a blocking manner\n                      this.defineDriver(driver);\n                  }\n              }\n          }\n\n          this._defaultConfig = extend({}, DefaultConfig);\n          this._config = extend({}, this._defaultConfig, options);\n          this._driverSet = null;\n          this._initDriver = null;\n          this._ready = false;\n          this._dbInfo = null;\n\n          this._wrapLibraryMethodsWithReady();\n          this.setDriver(this._config.driver)[\"catch\"](function () {});\n      }\n\n      // Set any config values for localForage; can be called anytime before\n      // the first API call (e.g. `getItem`, `setItem`).\n      // We loop through options so we don't overwrite existing config\n      // values.\n\n\n      LocalForage.prototype.config = function config(options) {\n          // If the options argument is an object, we use it to set values.\n          // Otherwise, we return either a specified config value or all\n          // config values.\n          if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n              // If localforage is ready and fully initialized, we can't set\n              // any new configuration values. Instead, we return an error.\n              if (this._ready) {\n                  return new Error(\"Can't call config() after localforage \" + 'has been used.');\n              }\n\n              for (var i in options) {\n                  if (i === 'storeName') {\n                      options[i] = options[i].replace(/\\W/g, '_');\n                  }\n\n                  if (i === 'version' && typeof options[i] !== 'number') {\n                      return new Error('Database version must be a number.');\n                  }\n\n                  this._config[i] = options[i];\n              }\n\n              // after all config options are set and\n              // the driver option is used, try setting it\n              if ('driver' in options && options.driver) {\n                  return this.setDriver(this._config.driver);\n              }\n\n              return true;\n          } else if (typeof options === 'string') {\n              return this._config[options];\n          } else {\n              return this._config;\n          }\n      };\n\n      // Used to define a custom driver, shared across all instances of\n      // localForage.\n\n\n      LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n          var promise = new Promise$1(function (resolve, reject) {\n              try {\n                  var driverName = driverObject._driver;\n                  var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                  // A driver name should be defined and not overlap with the\n                  // library-defined, default drivers.\n                  if (!driverObject._driver) {\n                      reject(complianceError);\n                      return;\n                  }\n\n                  var driverMethods = LibraryMethods.concat('_initStorage');\n                  for (var i = 0, len = driverMethods.length; i < len; i++) {\n                      var driverMethodName = driverMethods[i];\n\n                      // when the property is there,\n                      // it should be a method even when optional\n                      var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                      if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                          reject(complianceError);\n                          return;\n                      }\n                  }\n\n                  var configureMissingMethods = function configureMissingMethods() {\n                      var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                          return function () {\n                              var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                              var promise = Promise$1.reject(error);\n                              executeCallback(promise, arguments[arguments.length - 1]);\n                              return promise;\n                          };\n                      };\n\n                      for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                          var optionalDriverMethod = OptionalDriverMethods[_i];\n                          if (!driverObject[optionalDriverMethod]) {\n                              driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                          }\n                      }\n                  };\n\n                  configureMissingMethods();\n\n                  var setDriverSupport = function setDriverSupport(support) {\n                      if (DefinedDrivers[driverName]) {\n                          console.info('Redefining LocalForage driver: ' + driverName);\n                      }\n                      DefinedDrivers[driverName] = driverObject;\n                      DriverSupport[driverName] = support;\n                      // don't use a then, so that we can define\n                      // drivers that have simple _support methods\n                      // in a blocking manner\n                      resolve();\n                  };\n\n                  if ('_support' in driverObject) {\n                      if (driverObject._support && typeof driverObject._support === 'function') {\n                          driverObject._support().then(setDriverSupport, reject);\n                      } else {\n                          setDriverSupport(!!driverObject._support);\n                      }\n                  } else {\n                      setDriverSupport(true);\n                  }\n              } catch (e) {\n                  reject(e);\n              }\n          });\n\n          executeTwoCallbacks(promise, callback, errorCallback);\n          return promise;\n      };\n\n      LocalForage.prototype.driver = function driver() {\n          return this._driver || null;\n      };\n\n      LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n          var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n          executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n          return getDriverPromise;\n      };\n\n      LocalForage.prototype.getSerializer = function getSerializer(callback) {\n          var serializerPromise = Promise$1.resolve(localforageSerializer);\n          executeTwoCallbacks(serializerPromise, callback);\n          return serializerPromise;\n      };\n\n      LocalForage.prototype.ready = function ready(callback) {\n          var self = this;\n\n          var promise = self._driverSet.then(function () {\n              if (self._ready === null) {\n                  self._ready = self._initDriver();\n              }\n\n              return self._ready;\n          });\n\n          executeTwoCallbacks(promise, callback, callback);\n          return promise;\n      };\n\n      LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n          var self = this;\n\n          if (!isArray(drivers)) {\n              drivers = [drivers];\n          }\n\n          var supportedDrivers = this._getSupportedDrivers(drivers);\n\n          function setDriverToConfig() {\n              self._config.driver = self.driver();\n          }\n\n          function extendSelfWithDriver(driver) {\n              self._extend(driver);\n              setDriverToConfig();\n\n              self._ready = self._initStorage(self._config);\n              return self._ready;\n          }\n\n          function initDriver(supportedDrivers) {\n              return function () {\n                  var currentDriverIndex = 0;\n\n                  function driverPromiseLoop() {\n                      while (currentDriverIndex < supportedDrivers.length) {\n                          var driverName = supportedDrivers[currentDriverIndex];\n                          currentDriverIndex++;\n\n                          self._dbInfo = null;\n                          self._ready = null;\n\n                          return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                      }\n\n                      setDriverToConfig();\n                      var error = new Error('No available storage method found.');\n                      self._driverSet = Promise$1.reject(error);\n                      return self._driverSet;\n                  }\n\n                  return driverPromiseLoop();\n              };\n          }\n\n          // There might be a driver initialization in progress\n          // so wait for it to finish in order to avoid a possible\n          // race condition to set _dbInfo\n          var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n              return Promise$1.resolve();\n          }) : Promise$1.resolve();\n\n          this._driverSet = oldDriverSetDone.then(function () {\n              var driverName = supportedDrivers[0];\n              self._dbInfo = null;\n              self._ready = null;\n\n              return self.getDriver(driverName).then(function (driver) {\n                  self._driver = driver._driver;\n                  setDriverToConfig();\n                  self._wrapLibraryMethodsWithReady();\n                  self._initDriver = initDriver(supportedDrivers);\n              });\n          })[\"catch\"](function () {\n              setDriverToConfig();\n              var error = new Error('No available storage method found.');\n              self._driverSet = Promise$1.reject(error);\n              return self._driverSet;\n          });\n\n          executeTwoCallbacks(this._driverSet, callback, errorCallback);\n          return this._driverSet;\n      };\n\n      LocalForage.prototype.supports = function supports(driverName) {\n          return !!DriverSupport[driverName];\n      };\n\n      LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n          extend(this, libraryMethodsAndProperties);\n      };\n\n      LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n          var supportedDrivers = [];\n          for (var i = 0, len = drivers.length; i < len; i++) {\n              var driverName = drivers[i];\n              if (this.supports(driverName)) {\n                  supportedDrivers.push(driverName);\n              }\n          }\n          return supportedDrivers;\n      };\n\n      LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n          // Add a stub for each driver API method that delays the call to the\n          // corresponding driver method until localForage is ready. These stubs\n          // will be replaced by the driver methods as soon as the driver is\n          // loaded, so there is no performance impact.\n          for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n              callWhenReady(this, LibraryMethods[i]);\n          }\n      };\n\n      LocalForage.prototype.createInstance = function createInstance(options) {\n          return new LocalForage(options);\n      };\n\n      return LocalForage;\n  }();\n\n  // The actual localForage object that we expose as a module or via a\n  // global. It's extended by pulling in one of our other libraries.\n\n\n  var localforage_js = new LocalForage();\n\n  module.exports = localforage_js;\n\n  },{\"3\":3}]},{},[4])(4)\n  });\n  });\n\n  async function _asyncNullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return await rhsFn(); } }/* eslint-env browser */\n\n  // Log load message to browser dev console\n  console.log(loadMessagePlaceholder.slice(1, -1));\n\n  const manifest = chrome.runtime.getManifest();\n  const isMV2 = manifest.manifest_version === 2;\n\n  const options = {\n    executeScript: isMV2 && JSON.parse(executeScriptPlaceholder),\n    unregisterServiceWorkers:\n      isMV2 && JSON.parse(unregisterServiceWorkersPlaceholder),\n  };\n\n  /* ----------- UNREGISTER SERVICE WORKERS ---------- */\n\n  async function unregisterServiceWorkers() {\n    try {\n      const registrations = await navigator.serviceWorker.getRegistrations();\n      await Promise.all(registrations.map((r) => r.unregister()));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /* ----------- TRICK SERVICE WORKER OPEN ----------- */\n\n  const ports = new Set();\n  function reloadContentScripts() {\n    ports.forEach((port) => {\n      port.postMessage({ type: 'reload' });\n    });\n  }\n  chrome.runtime.onConnect.addListener((port) => {\n    if (port.name !== 'simpleReloader') return\n    ports.add(port);\n    port.onDisconnect.addListener(() => ports.delete(port));\n  });\n\n  /* -------------- CHECK TIMESTAMP.JSON ------------- */\n\n  const timestampKey = 'chromeExtensionReloaderTimestamp';\n  const errorsKey = 'chromeExtensionReloaderErrors';\n  const interval = setInterval(async () => {\n    try {\n      const res = await fetch(timestampPathPlaceholder);\n      const t = await res.json();\n      await localforage.removeItem(errorsKey);\n      const timestamp =\n        await _asyncNullishCoalesce((await localforage.getItem(timestampKey)), async () => ( undefined));\n\n      if (typeof timestamp === 'undefined') {\n        await localforage.setItem(timestampKey, t);\n      } else if (timestamp !== t) {\n        chrome.runtime.reload();\n      }\n    } catch (error) {\n      const errors =\n        await _asyncNullishCoalesce((await localforage.getItem(errorsKey)), async () => ( 0));\n\n      if (errors < 5) {\n        await localforage.setItem(errorsKey, errors + 1);\n      } else {\n        clearInterval(interval);\n\n        console.log(\n          'rollup-plugin-chrome-extension simple reloader error:',\n        );\n        console.error(error);\n      }\n    }\n  }, 1000);\n\n  /* ------------ POLYFILL RUNTIME.RELOAD ------------ */\n\n  // Other calls to runtime.reload\n  //  should also perform the same tasks\n  const _runtimeReload = chrome.runtime.reload;\n  chrome.runtime.reload = () => {\n  (async () => {\n      // Stop checking the timestamp\n      clearInterval(interval);\n      // Clean up storage\n      await localforage.removeItem(timestampKey);\n      // Reload the content scripts\n      reloadContentScripts();\n      // Unregister service workers in MV2\n      if (options.unregisterServiceWorkers)\n        await unregisterServiceWorkers();\n      // Reload the extension\n      _runtimeReload();\n    })();\n  };\n\n  /* ---------- POLYFILL TABS.EXECUTESCRIPT ---------- */\n\n  if (options.executeScript) {\n    const markerId =\n      'rollup-plugin-chrome-extension-simple-reloader';\n\n    const addMarker = `{\n    const tag = document.createElement('meta');\n    tag.id = '${markerId}';\n    document.head.append(tag);\n  }`;\n\n    const checkMarker = `\n  !!document.head.querySelector('#${markerId}')\n  `;\n\n    // Modify chrome.tabs.executeScript to inject reloader\n    const _executeScript = chrome.tabs.executeScript;\n    const withP = (...args) =>\n      new Promise((resolve, reject) => {\n        // eslint-disable-next-line\n        // @ts-ignore\n        _executeScript(...args, (results) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError.message);\n          } else {\n            resolve(results);\n          }\n        });\n      });\n\n    // @ts-expect-error executeScript has a complex return type\n    chrome.tabs.executeScript = async (...args) => {\n      const tabId = typeof args[0] === 'number' ? args[0] : null;\n      const argsBase = (tabId === null ? [] : [tabId]); \n\n      const [done] = await withP(\n        ...(argsBase.concat({ code: checkMarker }) ),\n      );\n\n      // Don't add reloader if it's already there\n      if (!done) {\n        await withP(\n          ...(argsBase.concat({ code: addMarker }) ),\n        );\n\n        // execute reloader\n        const reloaderArgs = argsBase.concat([\n          { file: JSON.parse(ctScriptPathPlaceholder) },\n        ]); \n\n        await withP(...reloaderArgs);\n      }\n\n      return _executeScript(...(args ))\n    };\n  }\n\n}());\n";

const code$5 = "(function () {\n  'use strict';\n\n  /* ------------------- FILENAMES ------------------- */\n  const loadMessagePlaceholder = '%LOAD_MESSAGE%';\n\n  /* eslint-env browser */\n\n  const delay = (ms) =>\n    new Promise((resolve) => setTimeout(() => resolve(), ms));\n\n  // Log load message to browser dev console\n  console.log(loadMessagePlaceholder.slice(1, -1));\n\n  const { name } = chrome.runtime.getManifest();\n\n  connect()\n    .then(reload)\n    .catch(console.error);\n\n  async function reload() {\n    console.log(`${name} has reloaded...`);\n\n    await delay(500);\n\n    return location.reload()\n  }\n\n  async function connect() {\n    // If the background was reloaded manually,\n    //  need to delay for context invalidation\n    await delay(100);\n\n    let port;\n    try {\n      // This will throw if bg was reloaded manually\n      port = chrome.runtime.connect({\n        name: 'simpleReloader',\n      });\n    } catch (error) {\n      return // should reload, context invalid\n    }\n\n    const shouldReload = await Promise.race([\n      // get a new port every 5 minutes\n      delay(5 * 59 * 1000).then(() => false),\n      // or if the background disconnects\n      new Promise((r) =>\n        port.onDisconnect.addListener(r),\n      ).then(() => false),\n      // unless we get a reload message\n      new Promise((r) =>\n        port.onMessage.addListener(r),\n      ).then(({ type }) => type === 'reload'),\n    ]);\n\n    // Clean up old port\n    port.disconnect();\n\n    if (shouldReload) return\n\n    return connect()\n  }\n\n}());\n";

/* ------------------- FILENAMES ------------------- */

const backgroundPageReloader =
  'background-page-reloader.js';
const contentScriptReloader = 'content-script-reloader.js';
const timestampFilename = 'timestamp.json';

/* ------------------ PLACEHOLDERS ----------------- */

const timestampPathPlaceholder = '%TIMESTAMP_PATH%';
const loadMessagePlaceholder = '%LOAD_MESSAGE%';
const ctScriptPathPlaceholder = '%CONTENT_SCRIPT_PATH%';
const unregisterServiceWorkersPlaceholder = '%UNREGISTER_SERVICE_WORKERS%';
const executeScriptPlaceholder = '%EXECUTE_SCRIPT%';

function _nullishCoalesce$3(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain$5(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
const delay = (ms) =>
  new Promise((resolve) => setTimeout(resolve, ms));





















// Used for testing
const _internalCache = {};

const simpleReloader = (
  {
    executeScript = true,
    unregisterServiceWorkers = true,
    reloadDelay = 100,
  } = {} ,
  cache = {} ,
) => {
  if (!process.env.ROLLUP_WATCH) {
    return undefined
  }

  return {
    name: 'chrome-extension-simple-reloader',

    generateBundle({ dir }, bundle) {
      const date = new Date();
      const time = `${date
        .getFullYear()
        .toString()
        .padStart(2, '0')}-${(date.getMonth() + 1)
        .toString()
        .padStart(2, '0')}-${date
        .getDate()
        .toString()
        .padStart(2, '0')} ${date
        .getHours()
        .toString()
        .padStart(2, '0')}:${date
        .getMinutes()
        .toString()
        .padStart(2, '0')}:${date
        .getSeconds()
        .toString()
        .padStart(2, '0')}`;

      cache.outputDir = dir;
      cache.loadMessage = [
        'DEVELOPMENT build with simple auto-reloader',
        `[${time}] waiting for changes...`,
      ].join('\n');

      /* --------------- EMIT CLIENT FILES --------------- */

      const emit = (
        name,
        source,
        isFileName,
      ) => {
        const id = this.emitFile({
          type: 'asset',
          [isFileName ? 'fileName' : 'name']: name,
          source,
        });

        return this.getFileName(id)
      };

      cache.timestampPath = emit(
        timestampFilename,
        JSON.stringify(Date.now()),
        true,
      );

      cache.ctScriptPath = emit(
        contentScriptReloader,
        code$5.replace(
          loadMessagePlaceholder,
          JSON.stringify(cache.loadMessage),
        ),
      );

      cache.bgScriptPath = emit(
        backgroundPageReloader,
        code$4
          .replace(timestampPathPlaceholder, cache.timestampPath)
          .replace(
            loadMessagePlaceholder,
            JSON.stringify(cache.loadMessage),
          )
          .replace(
            ctScriptPathPlaceholder,
            JSON.stringify(cache.ctScriptPath),
          )
          .replace(
            executeScriptPlaceholder,
            JSON.stringify(executeScript),
          )
          .replace(
            unregisterServiceWorkersPlaceholder,
            JSON.stringify(unregisterServiceWorkers),
          ),
      );

      // Update the exported cache
      Object.assign(_internalCache, cache);

      /* ---------------- UPDATE MANIFEST ---------------- */

      updateManifest(
        (manifest) => {
          /* ---------------- MANIFEST VERSION --------------- */

          cache.manifestVersion = manifest.manifest_version;

          /* ------------------ DESCRIPTION ------------------ */

          manifest.description = cache.loadMessage;

          /* ---------------- BACKGROUND PAGE ---------------- */

          if (!cache.bgScriptPath)
            this.error(
              `cache.bgScriptPath is ${typeof cache.bgScriptPath}`,
            );

          if (manifest.manifest_version === 3) {
            const swPath =
              _nullishCoalesce$3(_optionalChain$5([manifest, 'access', _ => _.background, 'optionalAccess', _2 => _2.service_worker]), () => (
              'service_worker.js'));

            const swCode = `
              // SIMPLE RELOADER IMPORT
              import "./${cache.bgScriptPath}"
            `.trim();

            if (!bundle[swPath]) emit(swPath, swCode, true);
            else {
              const sw = bundle[swPath]; 
              sw.code = `
              ${swCode}
              ${sw.code}
              `.trim();
            }

            lodash.set(manifest, 'background.service_worker', swPath);
            lodash.set(manifest, 'background.type', 'module');
          } else {
            lodash.set(
              manifest,
              'background.scripts',
              (_nullishCoalesce$3(_optionalChain$5([manifest, 'access', _3 => _3.background, 'optionalAccess', _4 => _4.scripts]), () => ( []))).concat([
                cache.bgScriptPath,
              ]),
            );
            lodash.set(manifest, 'background.persistent', true);
          }

          /* ---------------- CONTENT SCRIPTS ---------------- */

          if (!cache.ctScriptPath)
            this.error(
              `cache.ctScriptPath is ${typeof cache.ctScriptPath}`,
            );

          const { content_scripts: ctScripts } = manifest;

          manifest.content_scripts = _optionalChain$5([ctScripts, 'optionalAccess', _5 => _5.map, 'call', _6 => _6(
            ({ js = [], ...rest }) => ({
              js: [cache.ctScriptPath, ...js],
              ...rest,
            }),
          )]);

          return manifest
        },
        bundle,
        this.error,
      );

      // We'll write this file ourselves, we just need a safe path to write the timestamp
      delete bundle[cache.timestampPath];
    },

    /* -------------- WRITE TIMESTAMP FILE ------------- */
    async writeBundle() {
      // Sometimes Chrome says the manifest isn't valid, so we need to wait a bit
      reloadDelay > 0 && (await delay(reloadDelay));

      try {
        await fs.outputJson(
          path.join(cache.outputDir, cache.timestampPath),
          Date.now(),
        );
      } catch (err) {
        if (isErrorLike(err)) {
          this.error(
            `Unable to update timestamp file:\n\t${err.message}`,
          );
        } else {
          this.error('Unable to update timestamp file');
        }
      }
    },
  }
};




function isErrorLike(x) {
  return typeof x === 'object' && x !== null && 'message' in x
}

const chromeExtension = (
  options = {} ,
) => {
  /* --------------- LOAD PACKAGE.JSON --------------- */

  try {
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    options.pkg = options.pkg || fs.readJSONSync(packageJsonPath);
  } catch (error) {}

  /* ----------------- SETUP PLUGINS ----------------- */

  const manifest = manifestInput(options);
  const html = htmlInputs(manifest);
  const validate = validateNames();
  const browser = browserPolyfill(manifest);
  const mixedFormat$1 = mixedFormat(manifest);

  /* ----------------- RETURN PLUGIN ----------------- */

  return {
    name: 'chrome-extension',

    // For testing
    _plugins: { manifest, html, validate },

    config: () => {
      console.warn(
        'Please run `npm i rollup-plugin-chrome-extension@beta` to use with Vite.',
      );
      throw new Error(
        '[chrome-extension] Vite support is for RPCE v4 and above. This is RPCE v3.6.7.',
      )
    },

    options(options) {
      try {
        return [manifest, html].reduce((opts, plugin) => {
          const result = plugin.options.call(this, opts);

          return result || options
        }, options)
      } catch (error) {
        const manifestError =
          'The manifest must have at least one script or HTML file.';
        const htmlError =
          'At least one HTML file must have at least one script.';

        if (
          error.message === manifestError ||
          error.message === htmlError
        ) {
          throw new Error(
            'A Chrome extension must have at least one script or HTML file.',
          )
        } else {
          throw error
        }
      }
    },

    async buildStart(options) {
      await Promise.all([
        manifest.buildStart.call(this, options),
        html.buildStart.call(this, options),
      ]);
    },

    async resolveId(source, importer) {
      return manifest.resolveId.call(this, source, importer)
    },

    async load(id) {
      return manifest.load.call(this, id)
    },

    transform(source, id) {
      return manifest.transform.call(this, source, id)
    },

    watchChange(id) {
      manifest.watchChange.call(this, id);
      html.watchChange.call(this, id);
    },

    async generateBundle(...args) {
      await manifest.generateBundle.call(this, ...args);
      await validate.generateBundle.call(this, ...args);
      await browser.generateBundle.call(this, ...args);
      // TODO: should skip this if not needed
      await mixedFormat$1.generateBundle.call(this, ...args);
    },
  }
};

exports.chromeExtension = chromeExtension;
exports.simpleReloader = simpleReloader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
